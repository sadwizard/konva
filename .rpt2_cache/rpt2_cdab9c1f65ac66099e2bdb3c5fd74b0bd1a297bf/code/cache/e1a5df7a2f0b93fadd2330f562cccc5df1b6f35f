{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { Group } from '../Group';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n// constants\r\nvar ATTR_CHANGE_LIST = [\r\n    'fontFamily',\r\n    'fontSize',\r\n    'fontStyle',\r\n    'padding',\r\n    'lineHeight',\r\n    'text',\r\n    'width'\r\n], CHANGE_KONVA = 'Change.konva', NONE = 'none', UP = 'up', RIGHT = 'right', DOWN = 'down', LEFT = 'left', \r\n// cached variables\r\nattrChangeListLen = ATTR_CHANGE_LIST.length;\r\n/**\r\n * Label constructor.&nbsp; Labels are groups that contain a Text and Tag shape\r\n * @constructor\r\n * @memberof Konva\r\n * @param {Object} config\r\n * @@nodeParams\r\n * @example\r\n * // create label\r\n * var label = new Konva.Label({\r\n *   x: 100,\r\n *   y: 100,\r\n *   draggable: true\r\n * });\r\n *\r\n * // add a tag to the label\r\n * label.add(new Konva.Tag({\r\n *   fill: '#bbb',\r\n *   stroke: '#333',\r\n *   shadowColor: 'black',\r\n *   shadowBlur: 10,\r\n *   shadowOffset: [10, 10],\r\n *   shadowOpacity: 0.2,\r\n *   lineJoin: 'round',\r\n *   pointerDirection: 'up',\r\n *   pointerWidth: 20,\r\n *   pointerHeight: 20,\r\n *   cornerRadius: 5\r\n * }));\r\n *\r\n * // add text to the label\r\n * label.add(new Konva.Text({\r\n *   text: 'Hello World!',\r\n *   fontSize: 50,\r\n *   lineHeight: 1.2,\r\n *   padding: 10,\r\n *   fill: 'green'\r\n *  }));\r\n */\r\nvar Label = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Label, _super);\r\n    function Label(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.on('add.konva', function (evt) {\r\n            this._addListeners(evt.child);\r\n            this._sync();\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * get Text shape for the label.  You need to access the Text shape in order to update\r\n     * the text properties\r\n     * @name Konva.Label#getText\r\n     * @method\r\n     * @example\r\n     * label.getText().fill('red')\r\n     */\r\n    Label.prototype.getText = function () {\r\n        return this.find('Text')[0];\r\n    };\r\n    /**\r\n     * get Tag shape for the label.  You need to access the Tag shape in order to update\r\n     * the pointer properties and the corner radius\r\n     * @name Konva.Label#getTag\r\n     * @method\r\n     */\r\n    Label.prototype.getTag = function () {\r\n        return this.find('Tag')[0];\r\n    };\r\n    Label.prototype._addListeners = function (text) {\r\n        var that = this, n;\r\n        var func = function () {\r\n            that._sync();\r\n        };\r\n        // update text data for certain attr changes\r\n        for (n = 0; n < attrChangeListLen; n++) {\r\n            text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);\r\n        }\r\n    };\r\n    Label.prototype.getWidth = function () {\r\n        return this.getText().width();\r\n    };\r\n    Label.prototype.getHeight = function () {\r\n        return this.getText().height();\r\n    };\r\n    Label.prototype._sync = function () {\r\n        var text = this.getText(), tag = this.getTag(), width, height, pointerDirection, pointerWidth, x, y, pointerHeight;\r\n        if (text && tag) {\r\n            width = text.width();\r\n            height = text.height();\r\n            pointerDirection = tag.pointerDirection();\r\n            pointerWidth = tag.pointerWidth();\r\n            pointerHeight = tag.pointerHeight();\r\n            x = 0;\r\n            y = 0;\r\n            switch (pointerDirection) {\r\n                case UP:\r\n                    x = width / 2;\r\n                    y = -1 * pointerHeight;\r\n                    break;\r\n                case RIGHT:\r\n                    x = width + pointerWidth;\r\n                    y = height / 2;\r\n                    break;\r\n                case DOWN:\r\n                    x = width / 2;\r\n                    y = height + pointerHeight;\r\n                    break;\r\n                case LEFT:\r\n                    x = -1 * pointerWidth;\r\n                    y = height / 2;\r\n                    break;\r\n            }\r\n            tag.setAttrs({\r\n                x: -1 * x,\r\n                y: -1 * y,\r\n                width: width,\r\n                height: height\r\n            });\r\n            text.setAttrs({\r\n                x: -1 * x,\r\n                y: -1 * y\r\n            });\r\n        }\r\n    };\r\n    return Label;\r\n}(Group));\r\nexport { Label };\r\nLabel.prototype.className = 'Label';\r\n_registerNode(Label);\r\nCollection.mapMethods(Label);\r\n/**\r\n * Tag constructor.&nbsp; A Tag can be configured\r\n *  to have a pointer element that points up, right, down, or left\r\n * @constructor\r\n * @memberof Konva\r\n * @param {Object} config\r\n * @param {String} [config.pointerDirection] can be up, right, down, left, or none; the default\r\n *  is none.  When a pointer is present, the positioning of the label is relative to the tip of the pointer.\r\n * @param {Number} [config.pointerWidth]\r\n * @param {Number} [config.pointerHeight]\r\n * @param {Number} [config.cornerRadius]\r\n */\r\nvar Tag = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Tag, _super);\r\n    function Tag() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Tag.prototype._sceneFunc = function (context) {\r\n        var width = this.width(), height = this.height(), pointerDirection = this.pointerDirection(), pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), cornerRadius = Math.min(this.cornerRadius(), width / 2, height / 2);\r\n        context.beginPath();\r\n        if (!cornerRadius) {\r\n            context.moveTo(0, 0);\r\n        }\r\n        else {\r\n            context.moveTo(cornerRadius, 0);\r\n        }\r\n        if (pointerDirection === UP) {\r\n            context.lineTo((width - pointerWidth) / 2, 0);\r\n            context.lineTo(width / 2, -1 * pointerHeight);\r\n            context.lineTo((width + pointerWidth) / 2, 0);\r\n        }\r\n        if (!cornerRadius) {\r\n            context.lineTo(width, 0);\r\n        }\r\n        else {\r\n            context.lineTo(width - cornerRadius, 0);\r\n            context.arc(width - cornerRadius, cornerRadius, cornerRadius, (Math.PI * 3) / 2, 0, false);\r\n        }\r\n        if (pointerDirection === RIGHT) {\r\n            context.lineTo(width, (height - pointerHeight) / 2);\r\n            context.lineTo(width + pointerWidth, height / 2);\r\n            context.lineTo(width, (height + pointerHeight) / 2);\r\n        }\r\n        if (!cornerRadius) {\r\n            context.lineTo(width, height);\r\n        }\r\n        else {\r\n            context.lineTo(width, height - cornerRadius);\r\n            context.arc(width - cornerRadius, height - cornerRadius, cornerRadius, 0, Math.PI / 2, false);\r\n        }\r\n        if (pointerDirection === DOWN) {\r\n            context.lineTo((width + pointerWidth) / 2, height);\r\n            context.lineTo(width / 2, height + pointerHeight);\r\n            context.lineTo((width - pointerWidth) / 2, height);\r\n        }\r\n        if (!cornerRadius) {\r\n            context.lineTo(0, height);\r\n        }\r\n        else {\r\n            context.lineTo(cornerRadius, height);\r\n            context.arc(cornerRadius, height - cornerRadius, cornerRadius, Math.PI / 2, Math.PI, false);\r\n        }\r\n        if (pointerDirection === LEFT) {\r\n            context.lineTo(0, (height + pointerHeight) / 2);\r\n            context.lineTo(-1 * pointerWidth, height / 2);\r\n            context.lineTo(0, (height - pointerHeight) / 2);\r\n        }\r\n        if (cornerRadius) {\r\n            context.lineTo(0, cornerRadius);\r\n            context.arc(cornerRadius, cornerRadius, cornerRadius, Math.PI, (Math.PI * 3) / 2, false);\r\n        }\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Tag.prototype.getSelfRect = function () {\r\n        var x = 0, y = 0, pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), direction = this.pointerDirection(), width = this.width(), height = this.height();\r\n        if (direction === UP) {\r\n            y -= pointerHeight;\r\n            height += pointerHeight;\r\n        }\r\n        else if (direction === DOWN) {\r\n            height += pointerHeight;\r\n        }\r\n        else if (direction === LEFT) {\r\n            // ARGH!!! I have no idea why should I used magic 1.5!!!!!!!!!\r\n            x -= pointerWidth * 1.5;\r\n            width += pointerWidth;\r\n        }\r\n        else if (direction === RIGHT) {\r\n            width += pointerWidth * 1.5;\r\n        }\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height\r\n        };\r\n    };\r\n    return Tag;\r\n}(Shape));\r\nexport { Tag };\r\nTag.prototype.className = 'Tag';\r\n_registerNode(Tag);\r\n/**\r\n * get/set pointer direction\r\n * @name Konva.Tag#pointerDirection\r\n * @method\r\n * @param {String} pointerDirection can be up, right, down, left, or none.  The default is none.\r\n * @returns {String}\r\n * @example\r\n * tag.pointerDirection('right');\r\n */\r\nFactory.addGetterSetter(Tag, 'pointerDirection', NONE);\r\n/**\r\n * get/set pointer width\r\n * @name Konva.Tag#pointerWidth\r\n * @method\r\n * @param {Number} pointerWidth\r\n * @returns {Number}\r\n * @example\r\n * tag.pointerWidth(20);\r\n */\r\nFactory.addGetterSetter(Tag, 'pointerWidth', 0, getNumberValidator());\r\n/**\r\n * get/set pointer height\r\n * @method\r\n * @name Konva.Tag#pointerHeight\r\n * @param {Number} pointerHeight\r\n * @returns {Number}\r\n * @example\r\n * tag.pointerHeight(20);\r\n */\r\nFactory.addGetterSetter(Tag, 'pointerHeight', 0, getNumberValidator());\r\n/**\r\n * get/set cornerRadius\r\n * @name Konva.Tag#cornerRadius\r\n * @method\r\n * @param {Number} cornerRadius\r\n * @returns {Number}\r\n * @example\r\n * tag.cornerRadius(20);\r\n */\r\nFactory.addGetterSetter(Tag, 'cornerRadius', 0, getNumberValidator());\r\nCollection.mapMethods(Tag);\r\n"}
