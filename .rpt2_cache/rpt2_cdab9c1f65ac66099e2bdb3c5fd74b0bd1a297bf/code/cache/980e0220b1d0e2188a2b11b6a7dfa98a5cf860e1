{"code":"/*\r\n * Konva JavaScript Framework v@@version\r\n * http://konvajs.org/\r\n * Licensed under the MIT\r\n * Date: @@date\r\n *\r\n * Original work Copyright (C) 2011 - 2013 by Eric Rowell (KineticJS)\r\n * Modified work Copyright (C) 2014 - present by Anton Lavrenov (Konva)\r\n *\r\n * @license\r\n */\r\nvar PI_OVER_180 = Math.PI / 180;\r\n/**\r\n * @namespace Konva\r\n */\r\nfunction detectBrowser() {\r\n    return (typeof window !== 'undefined' &&\r\n        // browser case\r\n        ({}.toString.call(window) === '[object Window]' ||\r\n            // electron case\r\n            {}.toString.call(window) === '[object global]'));\r\n}\r\nvar _detectIE = function (ua) {\r\n    var msie = ua.indexOf('msie ');\r\n    if (msie > 0) {\r\n        // IE 10 or older => return version number\r\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\r\n    }\r\n    var trident = ua.indexOf('trident/');\r\n    if (trident > 0) {\r\n        // IE 11 => return version number\r\n        var rv = ua.indexOf('rv:');\r\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\r\n    }\r\n    var edge = ua.indexOf('edge/');\r\n    if (edge > 0) {\r\n        // Edge (IE 12+) => return version number\r\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\r\n    }\r\n    // other browser\r\n    return false;\r\n};\r\nexport var _parseUA = function (userAgent) {\r\n    var ua = userAgent.toLowerCase(), \r\n    // jQuery UA regex\r\n    match = /(chrome)[ /]([\\w.]+)/.exec(ua) ||\r\n        /(webkit)[ /]([\\w.]+)/.exec(ua) ||\r\n        /(opera)(?:.*version|)[ /]([\\w.]+)/.exec(ua) ||\r\n        /(msie) ([\\w.]+)/.exec(ua) ||\r\n        (ua.indexOf('compatible') < 0 &&\r\n            /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua)) ||\r\n        [], \r\n    // adding mobile flag as well\r\n    mobile = !!userAgent.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i), ieMobile = !!userAgent.match(/IEMobile/i);\r\n    return {\r\n        browser: match[1] || '',\r\n        version: match[2] || '0',\r\n        isIE: _detectIE(ua),\r\n        // adding mobile flab\r\n        mobile: mobile,\r\n        ieMobile: ieMobile // If this is true (i.e., WP8), then Konva touch events are executed instead of equivalent Konva mouse events\r\n    };\r\n};\r\nexport var glob = typeof global !== 'undefined'\r\n    ? global\r\n    : typeof window !== 'undefined'\r\n        ? window\r\n        : typeof WorkerGlobalScope !== 'undefined'\r\n            ? self\r\n            : {};\r\nexport var Konva = {\r\n    _global: glob,\r\n    version: '@@version',\r\n    isBrowser: detectBrowser(),\r\n    isUnminified: /param/.test(function (param) { }.toString()),\r\n    dblClickWindow: 400,\r\n    getAngle: function (angle) {\r\n        return Konva.angleDeg ? angle * PI_OVER_180 : angle;\r\n    },\r\n    enableTrace: false,\r\n    _pointerEventsEnabled: false,\r\n    // TODO: move that to stage?\r\n    listenClickTap: false,\r\n    inDblClickWindow: false,\r\n    /**\r\n     * Global pixel ratio configuration. KonvaJS automatically detect pixel ratio of current device.\r\n     * But you may override such property, if you want to use your value.\r\n     * @property pixelRatio\r\n     * @default undefined\r\n     * @name pixelRatio\r\n     * @memberof Konva\r\n     * @example\r\n     * Konva.pixelRatio = 1;\r\n     */\r\n    pixelRatio: undefined,\r\n    /**\r\n     * Drag distance property. If you start to drag a node you may want to wait until pointer is moved to some distance from start point,\r\n     * only then start dragging. Default is 3px.\r\n     * @property dragDistance\r\n     * @default 0\r\n     * @memberof Konva\r\n     * @example\r\n     * Konva.dragDistance = 10;\r\n     */\r\n    dragDistance: 3,\r\n    /**\r\n     * Use degree values for angle properties. You may set this property to false if you want to use radiant values.\r\n     * @property angleDeg\r\n     * @default true\r\n     * @memberof Konva\r\n     * @example\r\n     * node.rotation(45); // 45 degrees\r\n     * Konva.angleDeg = false;\r\n     * node.rotation(Math.PI / 2); // PI/2 radian\r\n     */\r\n    angleDeg: true,\r\n    /**\r\n     * Show different warnings about errors or wrong API usage\r\n     * @property showWarnings\r\n     * @default true\r\n     * @memberof Konva\r\n     * @example\r\n     * Konva.showWarnings = false;\r\n     */\r\n    showWarnings: true,\r\n    /**\r\n     * Configure what mouse buttons can be used for drag and drop.\r\n     * Default value is [0] - only left mouse button.\r\n     * @property dragButtons\r\n     * @default true\r\n     * @memberof Konva\r\n     * @example\r\n     * // enable left and right mouse buttons\r\n     * Konva.dragButtons = [0, 2];\r\n     */\r\n    dragButtons: [0, 1],\r\n    /**\r\n     * returns whether or not drag and drop is currently active\r\n     * @method\r\n     * @memberof Konva\r\n     */\r\n    isDragging: function () {\r\n        return Konva['DD'].isDragging;\r\n    },\r\n    /**\r\n     * returns whether or not a drag and drop operation is ready, but may\r\n     *  not necessarily have started\r\n     * @method\r\n     * @memberof Konva\r\n     */\r\n    isDragReady: function () {\r\n        return !!Konva['DD'].node;\r\n    },\r\n    // user agent\r\n    UA: _parseUA((glob.navigator && glob.navigator.userAgent) || ''),\r\n    document: glob.document,\r\n    // insert Konva into global namaspace (window)\r\n    // it is required for npm packages\r\n    _injectGlobal: function (Konva) {\r\n        glob.Konva = Konva;\r\n    },\r\n    _parseUA: _parseUA\r\n};\r\nexport var _NODES_REGISTRY = {};\r\nexport var _registerNode = function (NodeClass) {\r\n    _NODES_REGISTRY[NodeClass.prototype.getClassName()] = NodeClass;\r\n    Konva[NodeClass.prototype.getClassName()] = NodeClass;\r\n};\r\n"}
