{"code":"import { Util } from './Util';\r\nimport { Animation } from './Animation';\r\nimport { Node } from './Node';\r\nimport { Konva } from './Global';\r\nvar blacklist = {\r\n    node: 1,\r\n    duration: 1,\r\n    easing: 1,\r\n    onFinish: 1,\r\n    yoyo: 1\r\n}, PAUSED = 1, PLAYING = 2, REVERSING = 3, idCounter = 0, colorAttrs = ['fill', 'stroke', 'shadowColor'];\r\nvar TweenEngine = /** @class */ (function () {\r\n    function TweenEngine(prop, propFunc, func, begin, finish, duration, yoyo) {\r\n        this.prop = prop;\r\n        this.propFunc = propFunc;\r\n        this.begin = begin;\r\n        this._pos = begin;\r\n        this.duration = duration;\r\n        this._change = 0;\r\n        this.prevPos = 0;\r\n        this.yoyo = yoyo;\r\n        this._time = 0;\r\n        this._position = 0;\r\n        this._startTime = 0;\r\n        this._finish = 0;\r\n        this.func = func;\r\n        this._change = finish - this.begin;\r\n        this.pause();\r\n    }\r\n    TweenEngine.prototype.fire = function (str) {\r\n        var handler = this[str];\r\n        if (handler) {\r\n            handler();\r\n        }\r\n    };\r\n    TweenEngine.prototype.setTime = function (t) {\r\n        if (t > this.duration) {\r\n            if (this.yoyo) {\r\n                this._time = this.duration;\r\n                this.reverse();\r\n            }\r\n            else {\r\n                this.finish();\r\n            }\r\n        }\r\n        else if (t < 0) {\r\n            if (this.yoyo) {\r\n                this._time = 0;\r\n                this.play();\r\n            }\r\n            else {\r\n                this.reset();\r\n            }\r\n        }\r\n        else {\r\n            this._time = t;\r\n            this.update();\r\n        }\r\n    };\r\n    TweenEngine.prototype.getTime = function () {\r\n        return this._time;\r\n    };\r\n    TweenEngine.prototype.setPosition = function (p) {\r\n        this.prevPos = this._pos;\r\n        this.propFunc(p);\r\n        this._pos = p;\r\n    };\r\n    TweenEngine.prototype.getPosition = function (t) {\r\n        if (t === undefined) {\r\n            t = this._time;\r\n        }\r\n        return this.func(t, this.begin, this._change, this.duration);\r\n    };\r\n    TweenEngine.prototype.play = function () {\r\n        this.state = PLAYING;\r\n        this._startTime = this.getTimer() - this._time;\r\n        this.onEnterFrame();\r\n        this.fire('onPlay');\r\n    };\r\n    TweenEngine.prototype.reverse = function () {\r\n        this.state = REVERSING;\r\n        this._time = this.duration - this._time;\r\n        this._startTime = this.getTimer() - this._time;\r\n        this.onEnterFrame();\r\n        this.fire('onReverse');\r\n    };\r\n    TweenEngine.prototype.seek = function (t) {\r\n        this.pause();\r\n        this._time = t;\r\n        this.update();\r\n        this.fire('onSeek');\r\n    };\r\n    TweenEngine.prototype.reset = function () {\r\n        this.pause();\r\n        this._time = 0;\r\n        this.update();\r\n        this.fire('onReset');\r\n    };\r\n    TweenEngine.prototype.finish = function () {\r\n        this.pause();\r\n        this._time = this.duration;\r\n        this.update();\r\n        this.fire('onFinish');\r\n    };\r\n    TweenEngine.prototype.update = function () {\r\n        this.setPosition(this.getPosition(this._time));\r\n    };\r\n    TweenEngine.prototype.onEnterFrame = function () {\r\n        var t = this.getTimer() - this._startTime;\r\n        if (this.state === PLAYING) {\r\n            this.setTime(t);\r\n        }\r\n        else if (this.state === REVERSING) {\r\n            this.setTime(this.duration - t);\r\n        }\r\n    };\r\n    TweenEngine.prototype.pause = function () {\r\n        this.state = PAUSED;\r\n        this.fire('onPause');\r\n    };\r\n    TweenEngine.prototype.getTimer = function () {\r\n        return new Date().getTime();\r\n    };\r\n    return TweenEngine;\r\n}());\r\n/**\r\n * Tween constructor.  Tweens enable you to animate a node between the current state and a new state.\r\n *  You can play, pause, reverse, seek, reset, and finish tweens.  By default, tweens are animated using\r\n *  a linear easing.  For more tweening options, check out {@link Konva.Easings}\r\n * @constructor\r\n * @memberof Konva\r\n * @example\r\n * // instantiate new tween which fully rotates a node in 1 second\r\n * var tween = new Konva.Tween({\r\n *   node: node,\r\n *   rotationDeg: 360,\r\n *   duration: 1,\r\n *   easing: Konva.Easings.EaseInOut\r\n * });\r\n *\r\n * // play tween\r\n * tween.play();\r\n *\r\n * // pause tween\r\n * tween.pause();\r\n */\r\nvar Tween = /** @class */ (function () {\r\n    function Tween(config) {\r\n        var that = this, node = config.node, nodeId = node._id, duration, easing = config.easing || Easings.Linear, yoyo = !!config.yoyo, key;\r\n        if (typeof config.duration === 'undefined') {\r\n            duration = 0.3;\r\n        }\r\n        else if (config.duration === 0) {\r\n            // zero is bad value for duration\r\n            duration = 0.001;\r\n        }\r\n        else {\r\n            duration = config.duration;\r\n        }\r\n        this.node = node;\r\n        this._id = idCounter++;\r\n        var layers = node.getLayer() ||\r\n            (node instanceof Konva['Stage'] ? node.getLayers() : null);\r\n        if (!layers) {\r\n            Util.error('Tween constructor have `node` that is not in a layer. Please add node into layer first.');\r\n        }\r\n        this.anim = new Animation(function () {\r\n            that.tween.onEnterFrame();\r\n        }, layers);\r\n        this.tween = new TweenEngine(key, function (i) {\r\n            that._tweenFunc(i);\r\n        }, easing, 0, 1, duration * 1000, yoyo);\r\n        this._addListeners();\r\n        // init attrs map\r\n        if (!Tween.attrs[nodeId]) {\r\n            Tween.attrs[nodeId] = {};\r\n        }\r\n        if (!Tween.attrs[nodeId][this._id]) {\r\n            Tween.attrs[nodeId][this._id] = {};\r\n        }\r\n        // init tweens map\r\n        if (!Tween.tweens[nodeId]) {\r\n            Tween.tweens[nodeId] = {};\r\n        }\r\n        for (key in config) {\r\n            if (blacklist[key] === undefined) {\r\n                this._addAttr(key, config[key]);\r\n            }\r\n        }\r\n        this.reset();\r\n        // callbacks\r\n        this.onFinish = config.onFinish;\r\n        this.onReset = config.onReset;\r\n    }\r\n    Tween.prototype._addAttr = function (key, end) {\r\n        var node = this.node, nodeId = node._id, start, diff, tweenId, n, len, trueEnd, trueStart, endRGBA;\r\n        // remove conflict from tween map if it exists\r\n        tweenId = Tween.tweens[nodeId][key];\r\n        if (tweenId) {\r\n            delete Tween.attrs[nodeId][tweenId][key];\r\n        }\r\n        // add to tween map\r\n        start = node.getAttr(key);\r\n        if (Util._isArray(end)) {\r\n            diff = [];\r\n            len = Math.max(end.length, start.length);\r\n            if (key === 'points' && end.length !== start.length) {\r\n                // before tweening points we need to make sure that start.length === end.length\r\n                // Util._prepareArrayForTween thinking that end.length > start.length\r\n                if (end.length > start.length) {\r\n                    // so in this case we will increase number of starting points\r\n                    trueStart = start;\r\n                    start = Util._prepareArrayForTween(start, end, node.closed());\r\n                }\r\n                else {\r\n                    // in this case we will increase number of eding points\r\n                    trueEnd = end;\r\n                    end = Util._prepareArrayForTween(end, start, node.closed());\r\n                }\r\n            }\r\n            if (key.indexOf('fill') === 0) {\r\n                for (n = 0; n < len; n++) {\r\n                    if (n % 2 === 0) {\r\n                        diff.push(end[n] - start[n]);\r\n                    }\r\n                    else {\r\n                        var startRGBA = Util.colorToRGBA(start[n]);\r\n                        endRGBA = Util.colorToRGBA(end[n]);\r\n                        start[n] = startRGBA;\r\n                        diff.push({\r\n                            r: endRGBA.r - startRGBA.r,\r\n                            g: endRGBA.g - startRGBA.g,\r\n                            b: endRGBA.b - startRGBA.b,\r\n                            a: endRGBA.a - startRGBA.a\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (n = 0; n < len; n++) {\r\n                    diff.push(end[n] - start[n]);\r\n                }\r\n            }\r\n        }\r\n        else if (colorAttrs.indexOf(key) !== -1) {\r\n            start = Util.colorToRGBA(start);\r\n            endRGBA = Util.colorToRGBA(end);\r\n            diff = {\r\n                r: endRGBA.r - start.r,\r\n                g: endRGBA.g - start.g,\r\n                b: endRGBA.b - start.b,\r\n                a: endRGBA.a - start.a\r\n            };\r\n        }\r\n        else {\r\n            diff = end - start;\r\n        }\r\n        Tween.attrs[nodeId][this._id][key] = {\r\n            start: start,\r\n            diff: diff,\r\n            end: end,\r\n            trueEnd: trueEnd,\r\n            trueStart: trueStart\r\n        };\r\n        Tween.tweens[nodeId][key] = this._id;\r\n    };\r\n    Tween.prototype._tweenFunc = function (i) {\r\n        var node = this.node, attrs = Tween.attrs[node._id][this._id], key, attr, start, diff, newVal, n, len, end;\r\n        for (key in attrs) {\r\n            attr = attrs[key];\r\n            start = attr.start;\r\n            diff = attr.diff;\r\n            end = attr.end;\r\n            if (Util._isArray(start)) {\r\n                newVal = [];\r\n                len = Math.max(start.length, end.length);\r\n                if (key.indexOf('fill') === 0) {\r\n                    for (n = 0; n < len; n++) {\r\n                        if (n % 2 === 0) {\r\n                            newVal.push((start[n] || 0) + diff[n] * i);\r\n                        }\r\n                        else {\r\n                            newVal.push('rgba(' +\r\n                                Math.round(start[n].r + diff[n].r * i) +\r\n                                ',' +\r\n                                Math.round(start[n].g + diff[n].g * i) +\r\n                                ',' +\r\n                                Math.round(start[n].b + diff[n].b * i) +\r\n                                ',' +\r\n                                (start[n].a + diff[n].a * i) +\r\n                                ')');\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (n = 0; n < len; n++) {\r\n                        newVal.push((start[n] || 0) + diff[n] * i);\r\n                    }\r\n                }\r\n            }\r\n            else if (colorAttrs.indexOf(key) !== -1) {\r\n                newVal =\r\n                    'rgba(' +\r\n                        Math.round(start.r + diff.r * i) +\r\n                        ',' +\r\n                        Math.round(start.g + diff.g * i) +\r\n                        ',' +\r\n                        Math.round(start.b + diff.b * i) +\r\n                        ',' +\r\n                        (start.a + diff.a * i) +\r\n                        ')';\r\n            }\r\n            else {\r\n                newVal = start + diff * i;\r\n            }\r\n            node.setAttr(key, newVal);\r\n        }\r\n    };\r\n    Tween.prototype._addListeners = function () {\r\n        var _this = this;\r\n        // start listeners\r\n        this.tween.onPlay = function () {\r\n            _this.anim.start();\r\n        };\r\n        this.tween.onReverse = function () {\r\n            _this.anim.start();\r\n        };\r\n        // stop listeners\r\n        this.tween.onPause = function () {\r\n            _this.anim.stop();\r\n        };\r\n        this.tween.onFinish = function () {\r\n            var node = _this.node;\r\n            // after tweening  points of line we need to set original end\r\n            var attrs = Tween.attrs[node._id][_this._id];\r\n            if (attrs.points && attrs.points.trueEnd) {\r\n                node.setAttr('points', attrs.points.trueEnd);\r\n            }\r\n            if (_this.onFinish) {\r\n                _this.onFinish.call(_this);\r\n            }\r\n        };\r\n        this.tween.onReset = function () {\r\n            var node = _this.node;\r\n            // after tweening  points of line we need to set original start\r\n            var attrs = Tween.attrs[node._id][_this._id];\r\n            if (attrs.points && attrs.points.trueStart) {\r\n                node.points(attrs.points.trueStart);\r\n            }\r\n            if (_this.onReset) {\r\n                _this.onReset();\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * play\r\n     * @method\r\n     * @name Konva.Tween#play\r\n     * @returns {Tween}\r\n     */\r\n    Tween.prototype.play = function () {\r\n        this.tween.play();\r\n        return this;\r\n    };\r\n    /**\r\n     * reverse\r\n     * @method\r\n     * @name Konva.Tween#reverse\r\n     * @returns {Tween}\r\n     */\r\n    Tween.prototype.reverse = function () {\r\n        this.tween.reverse();\r\n        return this;\r\n    };\r\n    /**\r\n     * reset\r\n     * @method\r\n     * @name Konva.Tween#reset\r\n     * @returns {Tween}\r\n     */\r\n    Tween.prototype.reset = function () {\r\n        this.tween.reset();\r\n        return this;\r\n    };\r\n    /**\r\n     * seek\r\n     * @method\r\n     * @name Konva.Tween#seek(\r\n     * @param {Integer} t time in seconds between 0 and the duration\r\n     * @returns {Tween}\r\n     */\r\n    Tween.prototype.seek = function (t) {\r\n        this.tween.seek(t * 1000);\r\n        return this;\r\n    };\r\n    /**\r\n     * pause\r\n     * @method\r\n     * @name Konva.Tween#pause\r\n     * @returns {Tween}\r\n     */\r\n    Tween.prototype.pause = function () {\r\n        this.tween.pause();\r\n        return this;\r\n    };\r\n    /**\r\n     * finish\r\n     * @method\r\n     * @name Konva.Tween#finish\r\n     * @returns {Tween}\r\n     */\r\n    Tween.prototype.finish = function () {\r\n        this.tween.finish();\r\n        return this;\r\n    };\r\n    /**\r\n     * destroy\r\n     * @method\r\n     * @name Konva.Tween#destroy\r\n     */\r\n    Tween.prototype.destroy = function () {\r\n        var nodeId = this.node._id, thisId = this._id, attrs = Tween.tweens[nodeId], key;\r\n        this.pause();\r\n        for (key in attrs) {\r\n            delete Tween.tweens[nodeId][key];\r\n        }\r\n        delete Tween.attrs[nodeId][thisId];\r\n    };\r\n    Tween.attrs = {};\r\n    Tween.tweens = {};\r\n    return Tween;\r\n}());\r\nexport { Tween };\r\n/**\r\n * Tween node properties. Shorter usage of {@link Konva.Tween} object.\r\n *\r\n * @method Konva.Node#to\r\n * @param {Object} [params] tween params\r\n * @example\r\n *\r\n * circle.to({\r\n *   x : 50,\r\n *   duration : 0.5,\r\n *   onFinish: () => {\r\n *      console.log('finished');\r\n *   }\r\n * });\r\n */\r\nNode.prototype.to = function (params) {\r\n    var onFinish = params.onFinish;\r\n    params.node = this;\r\n    params.onFinish = function () {\r\n        this.destroy();\r\n        if (onFinish) {\r\n            onFinish();\r\n        }\r\n    };\r\n    var tween = new Tween(params);\r\n    tween.play();\r\n};\r\n/*\r\n * These eases were ported from an Adobe Flash tweening library to JavaScript\r\n * by Xaric\r\n */\r\n/**\r\n * @namespace Easings\r\n * @memberof Konva\r\n */\r\nexport var Easings = {\r\n    /**\r\n     * back ease in\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    BackEaseIn: function (t, b, c, d) {\r\n        var s = 1.70158;\r\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\r\n    },\r\n    /**\r\n     * back ease out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    BackEaseOut: function (t, b, c, d) {\r\n        var s = 1.70158;\r\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\r\n    },\r\n    /**\r\n     * back ease in out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    BackEaseInOut: function (t, b, c, d) {\r\n        var s = 1.70158;\r\n        if ((t /= d / 2) < 1) {\r\n            return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\r\n        }\r\n        return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\r\n    },\r\n    /**\r\n     * elastic ease in\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    ElasticEaseIn: function (t, b, c, d, a, p) {\r\n        // added s = 0\r\n        var s = 0;\r\n        if (t === 0) {\r\n            return b;\r\n        }\r\n        if ((t /= d) === 1) {\r\n            return b + c;\r\n        }\r\n        if (!p) {\r\n            p = d * 0.3;\r\n        }\r\n        if (!a || a < Math.abs(c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else {\r\n            s = (p / (2 * Math.PI)) * Math.asin(c / a);\r\n        }\r\n        return (-(a *\r\n            Math.pow(2, 10 * (t -= 1)) *\r\n            Math.sin(((t * d - s) * (2 * Math.PI)) / p)) + b);\r\n    },\r\n    /**\r\n     * elastic ease out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    ElasticEaseOut: function (t, b, c, d, a, p) {\r\n        // added s = 0\r\n        var s = 0;\r\n        if (t === 0) {\r\n            return b;\r\n        }\r\n        if ((t /= d) === 1) {\r\n            return b + c;\r\n        }\r\n        if (!p) {\r\n            p = d * 0.3;\r\n        }\r\n        if (!a || a < Math.abs(c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else {\r\n            s = (p / (2 * Math.PI)) * Math.asin(c / a);\r\n        }\r\n        return (a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +\r\n            c +\r\n            b);\r\n    },\r\n    /**\r\n     * elastic ease in out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    ElasticEaseInOut: function (t, b, c, d, a, p) {\r\n        // added s = 0\r\n        var s = 0;\r\n        if (t === 0) {\r\n            return b;\r\n        }\r\n        if ((t /= d / 2) === 2) {\r\n            return b + c;\r\n        }\r\n        if (!p) {\r\n            p = d * (0.3 * 1.5);\r\n        }\r\n        if (!a || a < Math.abs(c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else {\r\n            s = (p / (2 * Math.PI)) * Math.asin(c / a);\r\n        }\r\n        if (t < 1) {\r\n            return (-0.5 *\r\n                (a *\r\n                    Math.pow(2, 10 * (t -= 1)) *\r\n                    Math.sin(((t * d - s) * (2 * Math.PI)) / p)) +\r\n                b);\r\n        }\r\n        return (a *\r\n            Math.pow(2, -10 * (t -= 1)) *\r\n            Math.sin(((t * d - s) * (2 * Math.PI)) / p) *\r\n            0.5 +\r\n            c +\r\n            b);\r\n    },\r\n    /**\r\n     * bounce ease out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    BounceEaseOut: function (t, b, c, d) {\r\n        if ((t /= d) < 1 / 2.75) {\r\n            return c * (7.5625 * t * t) + b;\r\n        }\r\n        else if (t < 2 / 2.75) {\r\n            return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\r\n        }\r\n        else if (t < 2.5 / 2.75) {\r\n            return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\r\n        }\r\n        else {\r\n            return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\r\n        }\r\n    },\r\n    /**\r\n     * bounce ease in\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    BounceEaseIn: function (t, b, c, d) {\r\n        return c - Easings.BounceEaseOut(d - t, 0, c, d) + b;\r\n    },\r\n    /**\r\n     * bounce ease in out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    BounceEaseInOut: function (t, b, c, d) {\r\n        if (t < d / 2) {\r\n            return Easings.BounceEaseIn(t * 2, 0, c, d) * 0.5 + b;\r\n        }\r\n        else {\r\n            return Easings.BounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\r\n        }\r\n    },\r\n    /**\r\n     * ease in\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    EaseIn: function (t, b, c, d) {\r\n        return c * (t /= d) * t + b;\r\n    },\r\n    /**\r\n     * ease out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    EaseOut: function (t, b, c, d) {\r\n        return -c * (t /= d) * (t - 2) + b;\r\n    },\r\n    /**\r\n     * ease in out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    EaseInOut: function (t, b, c, d) {\r\n        if ((t /= d / 2) < 1) {\r\n            return (c / 2) * t * t + b;\r\n        }\r\n        return (-c / 2) * (--t * (t - 2) - 1) + b;\r\n    },\r\n    /**\r\n     * strong ease in\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    StrongEaseIn: function (t, b, c, d) {\r\n        return c * (t /= d) * t * t * t * t + b;\r\n    },\r\n    /**\r\n     * strong ease out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    StrongEaseOut: function (t, b, c, d) {\r\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n    },\r\n    /**\r\n     * strong ease in out\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    StrongEaseInOut: function (t, b, c, d) {\r\n        if ((t /= d / 2) < 1) {\r\n            return (c / 2) * t * t * t * t * t + b;\r\n        }\r\n        return (c / 2) * ((t -= 2) * t * t * t * t + 2) + b;\r\n    },\r\n    /**\r\n     * linear\r\n     * @function\r\n     * @memberof Konva.Easings\r\n     */\r\n    Linear: function (t, b, c, d) {\r\n        return (c * t) / d + b;\r\n    }\r\n};\r\n"}
