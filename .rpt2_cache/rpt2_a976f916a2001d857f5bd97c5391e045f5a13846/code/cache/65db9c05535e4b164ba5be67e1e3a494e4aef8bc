{"code":"import { Factory } from '../Factory';\r\nimport { Node } from '../Node';\r\nimport { getNumberValidator } from '../Validators';\r\nFactory.addGetterSetter(Node, 'hue', 0, getNumberValidator(), Factory.afterSetFilter);\r\n/**\r\n * get/set hsv hue in degrees. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.\r\n * @name Konva.Node#hue\r\n * @method\r\n * @param {Number} hue value between 0 and 359\r\n * @returns {Number}\r\n */\r\nFactory.addGetterSetter(Node, 'saturation', 0, getNumberValidator(), Factory.afterSetFilter);\r\n/**\r\n * get/set hsv saturation. Use with {@link Konva.Filters.HSV} or {@link Konva.Filters.HSL} filter.\r\n * @name Konva.Node#saturation\r\n * @method\r\n * @param {Number} saturation 0 is no change, -1.0 halves the saturation, 1.0 doubles, etc..\r\n * @returns {Number}\r\n */\r\nFactory.addGetterSetter(Node, 'luminance', 0, getNumberValidator(), Factory.afterSetFilter);\r\n/**\r\n * get/set hsl luminance. Use with {@link Konva.Filters.HSL} filter.\r\n * @name Konva.Node#luminance\r\n * @method\r\n * @param {Number} value from -1 to 1\r\n * @returns {Number}\r\n */\r\n/**\r\n * HSL Filter. Adjusts the hue, saturation and luminance (or lightness)\r\n * @function\r\n * @memberof Konva.Filters\r\n * @param {Object} imageData\r\n * @author ippo615\r\n * @example\r\n * image.filters([Konva.Filters.HSL]);\r\n * image.luminance(0.2);\r\n */\r\nexport var HSL = function (imageData) {\r\n    var data = imageData.data, nPixels = data.length, v = 1, s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, l = this.luminance() * 127, i;\r\n    // Basis for the technique used:\r\n    // http://beesbuzz.biz/code/hsv_color_transforms.php\r\n    // V is the value multiplier (1 for none, 2 for double, 0.5 for half)\r\n    // S is the saturation multiplier (1 for none, 2 for double, 0.5 for half)\r\n    // H is the hue shift in degrees (0 to 360)\r\n    // vsu = V*S*cos(H*PI/180);\r\n    // vsw = V*S*sin(H*PI/180);\r\n    //[ .299V+.701vsu+.168vsw    .587V-.587vsu+.330vsw    .114V-.114vsu-.497vsw ] [R]\r\n    //[ .299V-.299vsu-.328vsw    .587V+.413vsu+.035vsw    .114V-.114vsu+.292vsw ]*[G]\r\n    //[ .299V-.300vsu+1.25vsw    .587V-.588vsu-1.05vsw    .114V+.886vsu-.203vsw ] [B]\r\n    // Precompute the values in the matrix:\r\n    var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);\r\n    // (result spot)(source spot)\r\n    var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;\r\n    var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;\r\n    var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;\r\n    var r, g, b, a;\r\n    for (i = 0; i < nPixels; i += 4) {\r\n        r = data[i + 0];\r\n        g = data[i + 1];\r\n        b = data[i + 2];\r\n        a = data[i + 3];\r\n        data[i + 0] = rr * r + rg * g + rb * b + l;\r\n        data[i + 1] = gr * r + gg * g + gb * b + l;\r\n        data[i + 2] = br * r + bg * g + bb * b + l;\r\n        data[i + 3] = a; // alpha\r\n    }\r\n};\r\n"}
