{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Util } from './Util';\r\nimport { SceneContext, HitContext } from './Context';\r\nimport { Konva } from './Global';\r\nimport { Factory } from './Factory';\r\nimport { getNumberValidator } from './Validators';\r\n// calculate pixel ratio\r\nvar _pixelRatio;\r\nfunction getDevicePixelRatio() {\r\n    if (_pixelRatio) {\r\n        return _pixelRatio;\r\n    }\r\n    var canvas = Util.createCanvasElement();\r\n    var context = canvas.getContext('2d');\r\n    _pixelRatio = (function () {\r\n        var devicePixelRatio = Konva._global.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio ||\r\n            context.mozBackingStorePixelRatio ||\r\n            context.msBackingStorePixelRatio ||\r\n            context.oBackingStorePixelRatio ||\r\n            context.backingStorePixelRatio ||\r\n            1;\r\n        return devicePixelRatio / backingStoreRatio;\r\n    })();\r\n    return _pixelRatio;\r\n}\r\n/**\r\n * Canvas Renderer constructor. It is a wrapper around native canvas element.\r\n * Usually you don't need to use it manually.\r\n * @constructor\r\n * @abstract\r\n * @memberof Konva\r\n * @param {Object} config\r\n * @param {Number} config.width\r\n * @param {Number} config.height\r\n * @param {Number} config.pixelRatio\r\n */\r\nvar Canvas = /** @class */ (function () {\r\n    function Canvas(config) {\r\n        this.pixelRatio = 1;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.isCache = false;\r\n        var conf = config || {};\r\n        var pixelRatio = conf.pixelRatio || Konva.pixelRatio || getDevicePixelRatio();\r\n        this.pixelRatio = pixelRatio;\r\n        this._canvas = Util.createCanvasElement();\r\n        // set inline styles\r\n        this._canvas.style.padding = '0';\r\n        this._canvas.style.margin = '0';\r\n        this._canvas.style.border = '0';\r\n        this._canvas.style.background = 'transparent';\r\n        this._canvas.style.position = 'absolute';\r\n        this._canvas.style.top = '0';\r\n        this._canvas.style.left = '0';\r\n    }\r\n    /**\r\n     * get canvas context\r\n     * @method\r\n     * @name Konva.Canvas#getContext\r\n     * @returns {CanvasContext} context\r\n     */\r\n    Canvas.prototype.getContext = function () {\r\n        return this.context;\r\n    };\r\n    Canvas.prototype.getPixelRatio = function () {\r\n        return this.pixelRatio;\r\n    };\r\n    Canvas.prototype.setPixelRatio = function (pixelRatio) {\r\n        var previousRatio = this.pixelRatio;\r\n        this.pixelRatio = pixelRatio;\r\n        this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);\r\n    };\r\n    Canvas.prototype.setWidth = function (width) {\r\n        // take into account pixel ratio\r\n        this.width = this._canvas.width = width * this.pixelRatio;\r\n        this._canvas.style.width = width + 'px';\r\n        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;\r\n        _context.scale(pixelRatio, pixelRatio);\r\n    };\r\n    Canvas.prototype.setHeight = function (height) {\r\n        // take into account pixel ratio\r\n        this.height = this._canvas.height = height * this.pixelRatio;\r\n        this._canvas.style.height = height + 'px';\r\n        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;\r\n        _context.scale(pixelRatio, pixelRatio);\r\n    };\r\n    Canvas.prototype.getWidth = function () {\r\n        return this.width;\r\n    };\r\n    Canvas.prototype.getHeight = function () {\r\n        return this.height;\r\n    };\r\n    Canvas.prototype.setSize = function (width, height) {\r\n        this.setWidth(width);\r\n        this.setHeight(height);\r\n    };\r\n    /**\r\n     * to data url\r\n     * @method\r\n     * @name Konva.Canvas#toDataURL\r\n     * @param {String} mimeType\r\n     * @param {Number} quality between 0 and 1 for jpg mime types\r\n     * @returns {String} data url string\r\n     */\r\n    Canvas.prototype.toDataURL = function (mimeType, quality) {\r\n        try {\r\n            // If this call fails (due to browser bug, like in Firefox 3.6),\r\n            // then revert to previous no-parameter image/png behavior\r\n            return this._canvas.toDataURL(mimeType, quality);\r\n        }\r\n        catch (e) {\r\n            try {\r\n                return this._canvas.toDataURL();\r\n            }\r\n            catch (err) {\r\n                Util.error('Unable to get data URL. ' + err.message);\r\n                return '';\r\n            }\r\n        }\r\n    };\r\n    return Canvas;\r\n}());\r\nexport { Canvas };\r\n/**\r\n * get/set pixel ratio.\r\n * KonvaJS automatically handles pixel ratio adustments in order to render crisp drawings\r\n *  on all devices. Most desktops, low end tablets, and low end phones, have device pixel ratios\r\n *  of 1.  Some high end tablets and phones, like iPhones and iPads have a device pixel ratio\r\n *  of 2.  Some Macbook Pros, and iMacs also have a device pixel ratio of 2.  Some high end Android devices have pixel\r\n *  ratios of 2 or 3.  Some browsers like Firefox allow you to configure the pixel ratio of the viewport.  Unless otherwise\r\n *  specificed, the pixel ratio will be defaulted to the actual device pixel ratio.  You can override the device pixel\r\n *  ratio for special situations, or, if you don't want the pixel ratio to be taken into account, you can set it to 1.\r\n * @name Konva.Canvas#pixelRatio\r\n * @method\r\n * @param {Number} pixelRatio\r\n * @returns {Number}\r\n * @example\r\n * // get\r\n * var pixelRatio = canvas.pixelRatio();\r\n *\r\n * // set\r\n * canvas.pixelRatio(100);\r\n */\r\nFactory.addGetterSetter(Canvas, 'pixelRatio', undefined, getNumberValidator());\r\nvar SceneCanvas = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SceneCanvas, _super);\r\n    function SceneCanvas(config) {\r\n        if (config === void 0) { config = { width: 0, height: 0 }; }\r\n        var _this = _super.call(this, config) || this;\r\n        _this.context = new SceneContext(_this);\r\n        _this.setSize(config.width, config.height);\r\n        return _this;\r\n    }\r\n    return SceneCanvas;\r\n}(Canvas));\r\nexport { SceneCanvas };\r\nvar HitCanvas = /** @class */ (function (_super) {\r\n    tslib_1.__extends(HitCanvas, _super);\r\n    function HitCanvas(config) {\r\n        if (config === void 0) { config = { width: 0, height: 0 }; }\r\n        var _this = _super.call(this, config) || this;\r\n        _this.hitCanvas = true;\r\n        _this.context = new HitContext(_this);\r\n        _this.setSize(config.width, config.height);\r\n        return _this;\r\n    }\r\n    return HitCanvas;\r\n}(Canvas));\r\nexport { HitCanvas };\r\n"}
