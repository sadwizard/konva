{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Util, Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * Image constructor\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {Image} config.image\r\n * @param {Object} [config.crop]\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * var imageObj = new Image();\r\n * imageObj.onload = function() {\r\n *   var image = new Konva.Image({\r\n *     x: 200,\r\n *     y: 50,\r\n *     image: imageObj,\r\n *     width: 100,\r\n *     height: 100\r\n *   });\r\n * };\r\n * imageObj.src = '/path/to/image.jpg'\r\n */\r\nvar Image = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Image, _super);\r\n    function Image() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Image.prototype._useBufferCanvas = function () {\r\n        return !!((this.hasShadow() || this.getAbsoluteOpacity() !== 1) &&\r\n            this.hasStroke() &&\r\n            this.getStage());\r\n    };\r\n    Image.prototype._sceneFunc = function (context) {\r\n        var width = this.width(), height = this.height(), image = this.image(), cropWidth, cropHeight, params;\r\n        if (image) {\r\n            cropWidth = this.cropWidth();\r\n            cropHeight = this.cropHeight();\r\n            if (cropWidth && cropHeight) {\r\n                params = [\r\n                    image,\r\n                    this.cropX(),\r\n                    this.cropY(),\r\n                    cropWidth,\r\n                    cropHeight,\r\n                    0,\r\n                    0,\r\n                    width,\r\n                    height\r\n                ];\r\n            }\r\n            else {\r\n                params = [image, 0, 0, width, height];\r\n            }\r\n        }\r\n        if (this.hasFill() || this.hasStroke()) {\r\n            context.beginPath();\r\n            context.rect(0, 0, width, height);\r\n            context.closePath();\r\n            context.fillStrokeShape(this);\r\n        }\r\n        if (image) {\r\n            context.drawImage.apply(context, params);\r\n        }\r\n    };\r\n    Image.prototype._hitFunc = function (context) {\r\n        var width = this.width(), height = this.height();\r\n        context.beginPath();\r\n        context.rect(0, 0, width, height);\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Image.prototype.getWidth = function () {\r\n        var image = this.image();\r\n        return this.attrs.width || (image ? image.width : 0);\r\n    };\r\n    Image.prototype.getHeight = function () {\r\n        var image = this.image();\r\n        return this.attrs.height || (image ? image.height : 0);\r\n    };\r\n    /**\r\n     * load image from given url and create `Konva.Image` instance\r\n     * @method\r\n     * @memberof Konva.Image\r\n     * @param {String} url image source\r\n     * @param {Function} callback with Konva.Image instance as first argument\r\n     * @example\r\n     *  Konva.Image.fromURL(imageURL, function(image){\r\n     *    // image is Konva.Image instance\r\n     *    layer.add(image);\r\n     *    layer.draw();\r\n     *  });\r\n     */\r\n    Image.fromURL = function (url, callback) {\r\n        var img = Util.createImageElement();\r\n        img.onload = function () {\r\n            var image = new Image({\r\n                image: img\r\n            });\r\n            callback(image);\r\n        };\r\n        img.crossOrigin = 'Anonymous';\r\n        img.src = url;\r\n    };\r\n    return Image;\r\n}(Shape));\r\nexport { Image };\r\nImage.prototype.className = 'Image';\r\n_registerNode(Image);\r\n/**\r\n * get/set image source. It can be image, canvas or video element\r\n * @name Konva.Image#image\r\n * @method\r\n * @param {Number} y\r\n * @returns {Number}\r\n * @example\r\n * // get value\r\n * var image = shape.image();\r\n *\r\n * // set value\r\n * shape.image(img);\r\n */\r\nFactory.addGetterSetter(Image, 'image');\r\nFactory.addComponentsGetterSetter(Image, 'crop', ['x', 'y', 'width', 'height']);\r\n/**\r\n * get/set crop\r\n * @method\r\n * @name Konva.Image#crop\r\n * @param {Object} crop\r\n * @param {Number} crop.x\r\n * @param {Number} crop.y\r\n * @param {Number} crop.width\r\n * @param {Number} crop.height\r\n * @returns {Object}\r\n * @example\r\n * // get crop\r\n * var crop = image.crop();\r\n *\r\n * // set crop\r\n * image.crop({\r\n *   x: 20,\r\n *   y: 20,\r\n *   width: 20,\r\n *   height: 20\r\n * });\r\n */\r\nFactory.addGetterSetter(Image, 'cropX', 0, getNumberValidator());\r\n/**\r\n * get/set crop x\r\n * @method\r\n * @name Konva.Image#cropX\r\n * @param {Number} x\r\n * @returns {Number}\r\n * @example\r\n * // get crop x\r\n * var cropX = image.cropX();\r\n *\r\n * // set crop x\r\n * image.cropX(20);\r\n */\r\nFactory.addGetterSetter(Image, 'cropY', 0, getNumberValidator());\r\n/**\r\n * get/set crop y\r\n * @name Konva.Image#cropY\r\n * @method\r\n * @param {Number} y\r\n * @returns {Number}\r\n * @example\r\n * // get crop y\r\n * var cropY = image.cropY();\r\n *\r\n * // set crop y\r\n * image.cropY(20);\r\n */\r\nFactory.addGetterSetter(Image, 'cropWidth', 0, getNumberValidator());\r\n/**\r\n * get/set crop width\r\n * @name Konva.Image#cropWidth\r\n * @method\r\n * @param {Number} width\r\n * @returns {Number}\r\n * @example\r\n * // get crop width\r\n * var cropWidth = image.cropWidth();\r\n *\r\n * // set crop width\r\n * image.cropWidth(20);\r\n */\r\nFactory.addGetterSetter(Image, 'cropHeight', 0, getNumberValidator());\r\n/**\r\n * get/set crop height\r\n * @name Konva.Image#cropHeight\r\n * @method\r\n * @param {Number} height\r\n * @returns {Number}\r\n * @example\r\n * // get crop height\r\n * var cropHeight = image.cropHeight();\r\n *\r\n * // set crop height\r\n * image.cropHeight(20);\r\n */\r\nCollection.mapMethods(Image);\r\n"}
