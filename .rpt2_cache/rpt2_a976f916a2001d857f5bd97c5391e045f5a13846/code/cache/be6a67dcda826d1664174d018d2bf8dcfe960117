{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { Animation } from '../Animation';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * Sprite constructor\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {String} config.animation animation key\r\n * @param {Object} config.animations animation map\r\n * @param {Integer} [config.frameIndex] animation frame index\r\n * @param {Image} config.image image object\r\n * @param {Integer} [config.frameRate] animation frame rate\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * var imageObj = new Image();\r\n * imageObj.onload = function() {\r\n *   var sprite = new Konva.Sprite({\r\n *     x: 200,\r\n *     y: 100,\r\n *     image: imageObj,\r\n *     animation: 'standing',\r\n *     animations: {\r\n *       standing: [\r\n *         // x, y, width, height (6 frames)\r\n *         0, 0, 49, 109,\r\n *         52, 0, 49, 109,\r\n *         105, 0, 49, 109,\r\n *         158, 0, 49, 109,\r\n *         210, 0, 49, 109,\r\n *         262, 0, 49, 109\r\n *       ],\r\n *       kicking: [\r\n *         // x, y, width, height (6 frames)\r\n *         0, 109, 45, 98,\r\n *         45, 109, 45, 98,\r\n *         95, 109, 63, 98,\r\n *         156, 109, 70, 98,\r\n *         229, 109, 60, 98,\r\n *         287, 109, 41, 98\r\n *       ]\r\n *     },\r\n *     frameRate: 7,\r\n *     frameIndex: 0\r\n *   });\r\n * };\r\n * imageObj.src = '/path/to/image.jpg'\r\n */\r\nvar Sprite = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Sprite, _super);\r\n    function Sprite(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this._updated = true;\r\n        _this.anim = new Animation(function () {\r\n            // if we don't need to redraw layer we should return false\r\n            var updated = _this._updated;\r\n            _this._updated = false;\r\n            return updated;\r\n        });\r\n        _this.on('animationChange.konva', function () {\r\n            // reset index when animation changes\r\n            this.frameIndex(0);\r\n        });\r\n        _this.on('frameIndexChange.konva', function () {\r\n            this._updated = true;\r\n        });\r\n        // smooth change for frameRate\r\n        _this.on('frameRateChange.konva', function () {\r\n            if (!this.anim.isRunning()) {\r\n                return;\r\n            }\r\n            clearInterval(this.interval);\r\n            this._setInterval();\r\n        });\r\n        return _this;\r\n    }\r\n    Sprite.prototype._sceneFunc = function (context) {\r\n        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), x = set[ix4 + 0], y = set[ix4 + 1], width = set[ix4 + 2], height = set[ix4 + 3], image = this.image();\r\n        if (this.hasFill() || this.hasStroke()) {\r\n            context.beginPath();\r\n            context.rect(0, 0, width, height);\r\n            context.closePath();\r\n            context.fillStrokeShape(this);\r\n        }\r\n        if (image) {\r\n            if (offsets) {\r\n                var offset = offsets[anim], ix2 = index * 2;\r\n                context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\r\n            }\r\n            else {\r\n                context.drawImage(image, x, y, width, height, 0, 0, width, height);\r\n            }\r\n        }\r\n    };\r\n    Sprite.prototype._hitFunc = function (context) {\r\n        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), width = set[ix4 + 2], height = set[ix4 + 3];\r\n        context.beginPath();\r\n        if (offsets) {\r\n            var offset = offsets[anim];\r\n            var ix2 = index * 2;\r\n            context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\r\n        }\r\n        else {\r\n            context.rect(0, 0, width, height);\r\n        }\r\n        context.closePath();\r\n        context.fillShape(this);\r\n    };\r\n    Sprite.prototype._useBufferCanvas = function () {\r\n        return ((this.hasShadow() || this.getAbsoluteOpacity() !== 1) && this.hasStroke());\r\n    };\r\n    Sprite.prototype._setInterval = function () {\r\n        var that = this;\r\n        this.interval = setInterval(function () {\r\n            that._updateIndex();\r\n        }, 1000 / this.frameRate());\r\n    };\r\n    /**\r\n     * start sprite animation\r\n     * @method\r\n     * @name Konva.Sprite#start\r\n     */\r\n    Sprite.prototype.start = function () {\r\n        if (this.isRunning()) {\r\n            return;\r\n        }\r\n        var layer = this.getLayer();\r\n        /*\r\n         * animation object has no executable function because\r\n         *  the updates are done with a fixed FPS with the setInterval\r\n         *  below.  The anim object only needs the layer reference for\r\n         *  redraw\r\n         */\r\n        this.anim.setLayers(layer);\r\n        this._setInterval();\r\n        this.anim.start();\r\n    };\r\n    /**\r\n     * stop sprite animation\r\n     * @method\r\n     * @name Konva.Sprite#stop\r\n     */\r\n    Sprite.prototype.stop = function () {\r\n        this.anim.stop();\r\n        clearInterval(this.interval);\r\n    };\r\n    /**\r\n     * determine if animation of sprite is running or not.  returns true or false\r\n     * @method\r\n     * @name Konva.Sprite#isRunning\r\n     * @returns {Boolean}\r\n     */\r\n    Sprite.prototype.isRunning = function () {\r\n        return this.anim.isRunning();\r\n    };\r\n    Sprite.prototype._updateIndex = function () {\r\n        var index = this.frameIndex(), animation = this.animation(), animations = this.animations(), anim = animations[animation], len = anim.length / 4;\r\n        if (index < len - 1) {\r\n            this.frameIndex(index + 1);\r\n        }\r\n        else {\r\n            this.frameIndex(0);\r\n        }\r\n    };\r\n    return Sprite;\r\n}(Shape));\r\nexport { Sprite };\r\nSprite.prototype.className = 'Sprite';\r\n_registerNode(Sprite);\r\n// add getters setters\r\nFactory.addGetterSetter(Sprite, 'animation');\r\n/**\r\n * get/set animation key\r\n * @name Konva.Sprite#animation\r\n * @method\r\n * @param {String} anim animation key\r\n * @returns {String}\r\n * @example\r\n * // get animation key\r\n * var animation = sprite.animation();\r\n *\r\n * // set animation key\r\n * sprite.animation('kicking');\r\n */\r\nFactory.addGetterSetter(Sprite, 'animations');\r\n/**\r\n * get/set animations map\r\n * @name Konva.Sprite#animations\r\n * @method\r\n * @param {Object} animations\r\n * @returns {Object}\r\n * @example\r\n * // get animations map\r\n * var animations = sprite.animations();\r\n *\r\n * // set animations map\r\n * sprite.animations({\r\n *   standing: [\r\n *     // x, y, width, height (6 frames)\r\n *     0, 0, 49, 109,\r\n *     52, 0, 49, 109,\r\n *     105, 0, 49, 109,\r\n *     158, 0, 49, 109,\r\n *     210, 0, 49, 109,\r\n *     262, 0, 49, 109\r\n *   ],\r\n *   kicking: [\r\n *     // x, y, width, height (6 frames)\r\n *     0, 109, 45, 98,\r\n *     45, 109, 45, 98,\r\n *     95, 109, 63, 98,\r\n *     156, 109, 70, 98,\r\n *     229, 109, 60, 98,\r\n *     287, 109, 41, 98\r\n *   ]\r\n * });\r\n */\r\nFactory.addGetterSetter(Sprite, 'frameOffsets');\r\n/**\r\n * get/set offsets map\r\n * @name Konva.Sprite#offsets\r\n * @method\r\n * @param {Object} offsets\r\n * @returns {Object}\r\n * @example\r\n * // get offsets map\r\n * var offsets = sprite.offsets();\r\n *\r\n * // set offsets map\r\n * sprite.offsets({\r\n *   standing: [\r\n *     // x, y (6 frames)\r\n *     0, 0,\r\n *     0, 0,\r\n *     5, 0,\r\n *     0, 0,\r\n *     0, 3,\r\n *     2, 0\r\n *   ],\r\n *   kicking: [\r\n *     // x, y (6 frames)\r\n *     0, 5,\r\n *     5, 0,\r\n *     10, 0,\r\n *     0, 0,\r\n *     2, 1,\r\n *     0, 0\r\n *   ]\r\n * });\r\n */\r\nFactory.addGetterSetter(Sprite, 'image');\r\n/**\r\n * get/set image\r\n * @name Konva.Sprite#image\r\n * @method\r\n * @param {Image} image\r\n * @returns {Image}\r\n * @example\r\n * // get image\r\n * var image = sprite.image();\r\n *\r\n * // set image\r\n * sprite.image(imageObj);\r\n */\r\nFactory.addGetterSetter(Sprite, 'frameIndex', 0, getNumberValidator());\r\n/**\r\n * set/set animation frame index\r\n * @name Konva.Sprite#frameIndex\r\n * @method\r\n * @param {Integer} frameIndex\r\n * @returns {Integer}\r\n * @example\r\n * // get animation frame index\r\n * var frameIndex = sprite.frameIndex();\r\n *\r\n * // set animation frame index\r\n * sprite.frameIndex(3);\r\n */\r\nFactory.addGetterSetter(Sprite, 'frameRate', 17, getNumberValidator());\r\n/**\r\n * get/set frame rate in frames per second.  Increase this number to make the sprite\r\n *  animation run faster, and decrease the number to make the sprite animation run slower\r\n *  The default is 17 frames per second\r\n * @name Konva.Sprite#frameRate\r\n * @method\r\n * @param {Integer} frameRate\r\n * @returns {Integer}\r\n * @example\r\n * // get frame rate\r\n * var frameRate = sprite.frameRate();\r\n *\r\n * // set frame rate to 2 frames per second\r\n * sprite.frameRate(2);\r\n */\r\nFactory.backCompat(Sprite, {\r\n    index: 'frameIndex',\r\n    getIndex: 'getFrameIndex',\r\n    setIndex: 'setFrameIndex'\r\n});\r\nCollection.mapMethods(Sprite);\r\n"}
