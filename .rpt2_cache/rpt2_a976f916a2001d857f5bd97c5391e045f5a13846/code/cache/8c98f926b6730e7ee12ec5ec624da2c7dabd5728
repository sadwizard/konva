{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * Circle constructor\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {Number} config.radius\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * // create circle\r\n * var circle = new Konva.Circle({\r\n *   radius: 40,\r\n *   fill: 'red',\r\n *   stroke: 'black',\r\n *   strokeWidth: 5\r\n * });\r\n */\r\nvar Circle = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Circle, _super);\r\n    function Circle() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Circle.prototype._sceneFunc = function (context) {\r\n        context.beginPath();\r\n        context.arc(0, 0, this.radius(), 0, Math.PI * 2, false);\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Circle.prototype.getWidth = function () {\r\n        return this.radius() * 2;\r\n    };\r\n    Circle.prototype.getHeight = function () {\r\n        return this.radius() * 2;\r\n    };\r\n    Circle.prototype.setWidth = function (width) {\r\n        if (this.radius() !== width / 2) {\r\n            this.radius(width / 2);\r\n        }\r\n    };\r\n    Circle.prototype.setHeight = function (height) {\r\n        if (this.radius() !== height / 2) {\r\n            this.radius(height / 2);\r\n        }\r\n    };\r\n    return Circle;\r\n}(Shape));\r\nexport { Circle };\r\nCircle.prototype._centroid = true;\r\nCircle.prototype.className = 'Circle';\r\nCircle.prototype._attrsAffectingSize = ['radius'];\r\n_registerNode(Circle);\r\n/**\r\n * get/set radius\r\n * @name Konva.Arrow#radius\r\n * @method\r\n * @param {Number} radius\r\n * @returns {Number}\r\n * @example\r\n * // get radius\r\n * var radius = circle.radius();\r\n *\r\n * // set radius\r\n * circle.radius(10);\r\n */\r\nFactory.addGetterSetter(Circle, 'radius', 0, getNumberValidator());\r\nCollection.mapMethods(Circle);\r\n"}
