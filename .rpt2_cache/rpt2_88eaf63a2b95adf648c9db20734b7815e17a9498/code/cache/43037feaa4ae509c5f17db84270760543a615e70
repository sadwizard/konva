{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * RegularPolygon constructor. Examples include triangles, squares, pentagons, hexagons, etc.\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {Number} config.sides\r\n * @param {Number} config.radius\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * var hexagon = new Konva.RegularPolygon({\r\n *   x: 100,\r\n *   y: 200,\r\n *   sides: 6,\r\n *   radius: 70,\r\n *   fill: 'red',\r\n *   stroke: 'black',\r\n *   strokeWidth: 4\r\n * });\r\n */\r\nvar RegularPolygon = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RegularPolygon, _super);\r\n    function RegularPolygon() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    RegularPolygon.prototype._sceneFunc = function (context) {\r\n        var sides = this.sides(), radius = this.radius(), n, x, y;\r\n        context.beginPath();\r\n        context.moveTo(0, 0 - radius);\r\n        for (n = 1; n < sides; n++) {\r\n            x = radius * Math.sin((n * 2 * Math.PI) / sides);\r\n            y = -1 * radius * Math.cos((n * 2 * Math.PI) / sides);\r\n            context.lineTo(x, y);\r\n        }\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    RegularPolygon.prototype.getWidth = function () {\r\n        return this.radius() * 2;\r\n    };\r\n    RegularPolygon.prototype.getHeight = function () {\r\n        return this.radius() * 2;\r\n    };\r\n    RegularPolygon.prototype.setWidth = function (width) {\r\n        this.radius(width / 2);\r\n    };\r\n    RegularPolygon.prototype.setHeight = function (height) {\r\n        this.radius(height / 2);\r\n    };\r\n    return RegularPolygon;\r\n}(Shape));\r\nexport { RegularPolygon };\r\nRegularPolygon.prototype.className = 'RegularPolygon';\r\nRegularPolygon.prototype._centroid = true;\r\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\r\n_registerNode(RegularPolygon);\r\n/**\r\n * get/set radius\r\n * @method\r\n * @name Konva.RegularPolygon#radius\r\n * @param {Number} radius\r\n * @returns {Number}\r\n * @example\r\n * // get radius\r\n * var radius = shape.radius();\r\n *\r\n * // set radius\r\n * shape.radius(10);\r\n */\r\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\r\n/**\r\n * get/set sides\r\n * @method\r\n * @name Konva.RegularPolygon#sides\r\n * @param {Number} sides\r\n * @returns {Number}\r\n * @example\r\n * // get sides\r\n * var sides = shape.sides();\r\n *\r\n * // set sides\r\n * shape.sides(10);\r\n */\r\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());\r\nCollection.mapMethods(RegularPolygon);\r\n"}
