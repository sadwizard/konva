{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * Rect constructor\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {Number} [config.cornerRadius]\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * var rect = new Konva.Rect({\r\n *   width: 100,\r\n *   height: 50,\r\n *   fill: 'red',\r\n *   stroke: 'black',\r\n *   strokeWidth: 5\r\n * });\r\n */\r\nvar Rect = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Rect, _super);\r\n    function Rect() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Rect.prototype._sceneFunc = function (context) {\r\n        var cornerRadius = this.cornerRadius(), width = this.width(), height = this.height();\r\n        context.beginPath();\r\n        if (!cornerRadius) {\r\n            // simple rect - don't bother doing all that complicated maths stuff.\r\n            context.rect(0, 0, width, height);\r\n        }\r\n        else {\r\n            var topLeft = 0;\r\n            var topRight = 0;\r\n            var bottomLeft = 0;\r\n            var bottomRight = 0;\r\n            if (typeof cornerRadius === 'number') {\r\n                topLeft = topRight = bottomLeft = bottomRight = Math.min(cornerRadius, width / 2, height / 2);\r\n            }\r\n            else {\r\n                topLeft = Math.min(cornerRadius[0], width / 2, height / 2);\r\n                topRight = Math.min(cornerRadius[1], width / 2, height / 2);\r\n                bottomRight = Math.min(cornerRadius[2], width / 2, height / 2);\r\n                bottomLeft = Math.min(cornerRadius[3], width / 2, height / 2);\r\n            }\r\n            context.moveTo(topLeft, 0);\r\n            context.lineTo(width - topRight, 0);\r\n            context.arc(width - topRight, topRight, topRight, (Math.PI * 3) / 2, 0, false);\r\n            context.lineTo(width, height - bottomRight);\r\n            context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);\r\n            context.lineTo(bottomLeft, height);\r\n            context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);\r\n            context.lineTo(0, topLeft);\r\n            context.arc(topLeft, topLeft, topLeft, Math.PI, (Math.PI * 3) / 2, false);\r\n        }\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    return Rect;\r\n}(Shape));\r\nexport { Rect };\r\nRect.prototype.className = 'Rect';\r\n_registerNode(Rect);\r\n/**\r\n * get/set corner radius\r\n * @method\r\n * @name Konva.Rect#cornerRadius\r\n * @param {Number} cornerRadius\r\n * @returns {Number}\r\n * @example\r\n * // get corner radius\r\n * var cornerRadius = rect.cornerRadius();\r\n *\r\n * // set corner radius\r\n * rect.cornerRadius(10);\r\n *\r\n * // set different corner radius values\r\n * // top-left, top-right, bottom-right, bottom-left\r\n * rect.cornerRadius([0, 10, 20, 30]);\r\n */\r\nFactory.addGetterSetter(Rect, 'cornerRadius', 0);\r\nCollection.mapMethods(Rect);\r\n"}
