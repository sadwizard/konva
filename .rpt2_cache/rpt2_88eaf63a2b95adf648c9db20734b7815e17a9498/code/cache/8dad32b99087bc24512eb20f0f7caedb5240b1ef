{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Util, Collection } from './Util';\r\nimport { Container } from './Container';\r\nimport { BaseLayer } from './BaseLayer';\r\nimport { _registerNode } from './Global';\r\n/**\r\n * FastLayer constructor. Layers are tied to their own canvas element and are used\r\n * to contain shapes only.  If you don't need node nesting, mouse and touch interactions,\r\n * or event pub/sub, you should use FastLayer instead of Layer to create your layers.\r\n * It renders about 2x faster than normal layers.\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.BaseLayer\r\n * @param {Object} config\r\n * @param {Boolean} [config.clearBeforeDraw] set this property to false if you don't want\r\n * to clear the canvas before each layer draw.  The default value is true.\r\n * @param {Boolean} [config.visible]\r\n * @param {String} [config.id] unique id\r\n * @param {String} [config.name] non-unique name\r\n * @param {Number} [config.opacity] determines node opacity.  Can be any number between 0 and 1\r\n * @@containerParams\r\n * @example\r\n * var layer = new Konva.FastLayer();\r\n */\r\nvar FastLayer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FastLayer, _super);\r\n    function FastLayer() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FastLayer.prototype._validateAdd = function (child) {\r\n        var type = child.getType();\r\n        if (type !== 'Shape') {\r\n            Util.throw('You may only add shapes to a fast layer.');\r\n        }\r\n    };\r\n    FastLayer.prototype._setCanvasSize = function (width, height) {\r\n        this.canvas.setSize(width, height);\r\n        this._checkSmooth();\r\n    };\r\n    FastLayer.prototype.hitGraphEnabled = function () {\r\n        return false;\r\n    };\r\n    FastLayer.prototype.drawScene = function (can) {\r\n        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas());\r\n        if (this.clearBeforeDraw()) {\r\n            canvas.getContext().clear();\r\n        }\r\n        Container.prototype.drawScene.call(this, canvas);\r\n        return this;\r\n    };\r\n    FastLayer.prototype.draw = function () {\r\n        this.drawScene();\r\n        return this;\r\n    };\r\n    return FastLayer;\r\n}(BaseLayer));\r\nexport { FastLayer };\r\nFastLayer.prototype.nodeType = 'FastLayer';\r\n_registerNode(FastLayer);\r\nCollection.mapMethods(FastLayer);\r\n"}
