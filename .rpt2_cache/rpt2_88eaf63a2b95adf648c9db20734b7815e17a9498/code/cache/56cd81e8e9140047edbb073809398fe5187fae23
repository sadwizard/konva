{"code":"import { Factory } from '../Factory';\r\nimport { Node } from '../Node';\r\nimport { getNumberValidator } from '../Validators';\r\n/**\r\n * Posterize Filter. Adjusts the channels so that there are no more\r\n *  than n different values for that channel. This is also applied\r\n *  to the alpha channel.\r\n * @function\r\n * @name Posterize\r\n * @author ippo615\r\n * @memberof Konva.Filters\r\n * @param {Object} imageData\r\n * @example\r\n * node.cache();\r\n * node.filters([Konva.Filters.Posterize]);\r\n * node.levels(0.8); // between 0 and 1\r\n */\r\nexport var Posterize = function (imageData) {\r\n    // level must be between 1 and 255\r\n    var levels = Math.round(this.levels() * 254) + 1, data = imageData.data, len = data.length, scale = 255 / levels, i;\r\n    for (i = 0; i < len; i += 1) {\r\n        data[i] = Math.floor(data[i] / scale) * scale;\r\n    }\r\n};\r\nFactory.addGetterSetter(Node, 'levels', 0.5, getNumberValidator(), Factory.afterSetFilter);\r\n/**\r\n * get/set levels.  Must be a number between 0 and 1.  Use with {@link Konva.Filters.Posterize} filter.\r\n * @name Konva.Node#levels\r\n * @method\r\n * @param {Number} level between 0 and 1\r\n * @returns {Number}\r\n */\r\n"}
