{"code":"import { Util } from './Util';\r\nimport { getComponentValidator } from './Validators';\r\nvar GET = 'get', SET = 'set';\r\nexport var Factory = {\r\n    addGetterSetter: function (constructor, attr, def, validator, after) {\r\n        this.addGetter(constructor, attr, def);\r\n        this.addSetter(constructor, attr, validator, after);\r\n        this.addOverloadedGetterSetter(constructor, attr);\r\n    },\r\n    addGetter: function (constructor, attr, def) {\r\n        var method = GET + Util._capitalize(attr);\r\n        constructor.prototype[method] =\r\n            constructor.prototype[method] ||\r\n                function () {\r\n                    var val = this.attrs[attr];\r\n                    return val === undefined ? def : val;\r\n                };\r\n    },\r\n    addSetter: function (constructor, attr, validator, after) {\r\n        var method = SET + Util._capitalize(attr);\r\n        if (!constructor.prototype[method]) {\r\n            Factory.overWriteSetter(constructor, attr, validator, after);\r\n        }\r\n    },\r\n    overWriteSetter: function (constructor, attr, validator, after) {\r\n        var method = SET + Util._capitalize(attr);\r\n        constructor.prototype[method] = function (val) {\r\n            if (validator && val !== undefined && val !== null) {\r\n                val = validator.call(this, val, attr);\r\n            }\r\n            this._setAttr(attr, val);\r\n            if (after) {\r\n                after.call(this);\r\n            }\r\n            return this;\r\n        };\r\n    },\r\n    addComponentsGetterSetter: function (constructor, attr, components, validator, after) {\r\n        var len = components.length, capitalize = Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;\r\n        // getter\r\n        constructor.prototype[getter] = function () {\r\n            var ret = {};\r\n            for (n = 0; n < len; n++) {\r\n                component = components[n];\r\n                ret[component] = this.getAttr(attr + capitalize(component));\r\n            }\r\n            return ret;\r\n        };\r\n        var basicValidator = getComponentValidator(components);\r\n        // setter\r\n        constructor.prototype[setter] = function (val) {\r\n            var oldVal = this.attrs[attr], key;\r\n            if (validator) {\r\n                val = validator.call(this, val);\r\n            }\r\n            if (basicValidator) {\r\n                basicValidator.call(this, val, attr);\r\n            }\r\n            for (key in val) {\r\n                if (!val.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n                this._setAttr(attr + capitalize(key), val[key]);\r\n            }\r\n            this._fireChangeEvent(attr, oldVal, val);\r\n            if (after) {\r\n                after.call(this);\r\n            }\r\n            return this;\r\n        };\r\n        this.addOverloadedGetterSetter(constructor, attr);\r\n    },\r\n    addOverloadedGetterSetter: function (constructor, attr) {\r\n        var capitalizedAttr = Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;\r\n        constructor.prototype[attr] = function () {\r\n            // setting\r\n            if (arguments.length) {\r\n                this[setter](arguments[0]);\r\n                return this;\r\n            }\r\n            // getting\r\n            return this[getter]();\r\n        };\r\n    },\r\n    addDeprecatedGetterSetter: function (constructor, attr, def, validator) {\r\n        Util.error('Adding deprecated ' + attr);\r\n        var method = GET + Util._capitalize(attr);\r\n        var message = attr +\r\n            ' property is deprecated and will be removed soon. Look at Konva change log for more information.';\r\n        constructor.prototype[method] = function () {\r\n            Util.error(message);\r\n            var val = this.attrs[attr];\r\n            return val === undefined ? def : val;\r\n        };\r\n        this.addSetter(constructor, attr, validator, function () {\r\n            Util.error(message);\r\n        });\r\n        this.addOverloadedGetterSetter(constructor, attr);\r\n    },\r\n    backCompat: function (constructor, methods) {\r\n        Util.each(methods, function (oldMethodName, newMethodName) {\r\n            var method = constructor.prototype[newMethodName];\r\n            var oldGetter = GET + Util._capitalize(oldMethodName);\r\n            var oldSetter = SET + Util._capitalize(oldMethodName);\r\n            function deprecated() {\r\n                method.apply(this, arguments);\r\n                Util.error('\"' +\r\n                    oldMethodName +\r\n                    '\" method is deprecated and will be removed soon. Use \"\"' +\r\n                    newMethodName +\r\n                    '\" instead.');\r\n            }\r\n            constructor.prototype[oldMethodName] = deprecated;\r\n            constructor.prototype[oldGetter] = deprecated;\r\n            constructor.prototype[oldSetter] = deprecated;\r\n        });\r\n    },\r\n    afterSetFilter: function () {\r\n        this._filterUpToDate = false;\r\n    }\r\n};\r\n"}
