{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * Star constructor\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {Integer} config.numPoints\r\n * @param {Number} config.innerRadius\r\n * @param {Number} config.outerRadius\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * var star = new Konva.Star({\r\n *   x: 100,\r\n *   y: 200,\r\n *   numPoints: 5,\r\n *   innerRadius: 70,\r\n *   outerRadius: 70,\r\n *   fill: 'red',\r\n *   stroke: 'black',\r\n *   strokeWidth: 4\r\n * });\r\n */\r\nvar Star = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Star, _super);\r\n    function Star() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Star.prototype._sceneFunc = function (context) {\r\n        var innerRadius = this.innerRadius(), outerRadius = this.outerRadius(), numPoints = this.numPoints();\r\n        context.beginPath();\r\n        context.moveTo(0, 0 - outerRadius);\r\n        for (var n = 1; n < numPoints * 2; n++) {\r\n            var radius = n % 2 === 0 ? outerRadius : innerRadius;\r\n            var x = radius * Math.sin((n * Math.PI) / numPoints);\r\n            var y = -1 * radius * Math.cos((n * Math.PI) / numPoints);\r\n            context.lineTo(x, y);\r\n        }\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Star.prototype.getWidth = function () {\r\n        return this.outerRadius() * 2;\r\n    };\r\n    Star.prototype.getHeight = function () {\r\n        return this.outerRadius() * 2;\r\n    };\r\n    Star.prototype.setWidth = function (width) {\r\n        this.outerRadius(width / 2);\r\n    };\r\n    Star.prototype.setHeight = function (height) {\r\n        this.outerRadius(height / 2);\r\n    };\r\n    return Star;\r\n}(Shape));\r\nexport { Star };\r\nStar.prototype.className = 'Star';\r\nStar.prototype._centroid = true;\r\nStar.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];\r\n_registerNode(Star);\r\n/**\r\n * get/set number of points\r\n * @name Konva.Ring#numPoints\r\n * @method\r\n * @param {Number} numPoints\r\n * @returns {Number}\r\n * @example\r\n * // get inner radius\r\n * var numPoints = ring.numPoints();\r\n *\r\n * // set inner radius\r\n * ring.numPoints(20);\r\n */\r\nFactory.addGetterSetter(Star, 'numPoints', 5, getNumberValidator());\r\n/**\r\n * get/set innerRadius\r\n * @name Konva.Ring#innerRadius\r\n * @method\r\n * @param {Number} innerRadius\r\n * @returns {Number}\r\n * @example\r\n * // get inner radius\r\n * var innerRadius = ring.innerRadius();\r\n *\r\n * // set inner radius\r\n * ring.innerRadius(20);\r\n */\r\nFactory.addGetterSetter(Star, 'innerRadius', 0, getNumberValidator());\r\n/**\r\n * get/set outerRadius\r\n * @name Konva.Ring#outerRadius\r\n * @method\r\n * @param {Number} outerRadius\r\n * @returns {Number}\r\n * @example\r\n * // get inner radius\r\n * var outerRadius = ring.outerRadius();\r\n *\r\n * // set inner radius\r\n * ring.outerRadius(20);\r\n */\r\nFactory.addGetterSetter(Star, 'outerRadius', 0, getNumberValidator());\r\nCollection.mapMethods(Star);\r\n"}
