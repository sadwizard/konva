{"code":"import { Factory } from '../Factory';\r\nimport { Node } from '../Node';\r\nimport { getNumberValidator } from '../Validators';\r\nfunction pixelAt(idata, x, y) {\r\n    var idx = (y * idata.width + x) * 4;\r\n    var d = [];\r\n    d.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);\r\n    return d;\r\n}\r\nfunction rgbDistance(p1, p2) {\r\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) +\r\n        Math.pow(p1[1] - p2[1], 2) +\r\n        Math.pow(p1[2] - p2[2], 2));\r\n}\r\nfunction rgbMean(pTab) {\r\n    var m = [0, 0, 0];\r\n    for (var i = 0; i < pTab.length; i++) {\r\n        m[0] += pTab[i][0];\r\n        m[1] += pTab[i][1];\r\n        m[2] += pTab[i][2];\r\n    }\r\n    m[0] /= pTab.length;\r\n    m[1] /= pTab.length;\r\n    m[2] /= pTab.length;\r\n    return m;\r\n}\r\nfunction backgroundMask(idata, threshold) {\r\n    var rgbv_no = pixelAt(idata, 0, 0);\r\n    var rgbv_ne = pixelAt(idata, idata.width - 1, 0);\r\n    var rgbv_so = pixelAt(idata, 0, idata.height - 1);\r\n    var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);\r\n    var thres = threshold || 10;\r\n    if (rgbDistance(rgbv_no, rgbv_ne) < thres &&\r\n        rgbDistance(rgbv_ne, rgbv_se) < thres &&\r\n        rgbDistance(rgbv_se, rgbv_so) < thres &&\r\n        rgbDistance(rgbv_so, rgbv_no) < thres) {\r\n        // Mean color\r\n        var mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);\r\n        // Mask based on color distance\r\n        var mask = [];\r\n        for (var i = 0; i < idata.width * idata.height; i++) {\r\n            var d = rgbDistance(mean, [\r\n                idata.data[i * 4],\r\n                idata.data[i * 4 + 1],\r\n                idata.data[i * 4 + 2]\r\n            ]);\r\n            mask[i] = d < thres ? 0 : 255;\r\n        }\r\n        return mask;\r\n    }\r\n}\r\nfunction applyMask(idata, mask) {\r\n    for (var i = 0; i < idata.width * idata.height; i++) {\r\n        idata.data[4 * i + 3] = mask[i];\r\n    }\r\n}\r\nfunction erodeMask(mask, sw, sh) {\r\n    var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];\r\n    var side = Math.round(Math.sqrt(weights.length));\r\n    var halfSide = Math.floor(side / 2);\r\n    var maskResult = [];\r\n    for (var y = 0; y < sh; y++) {\r\n        for (var x = 0; x < sw; x++) {\r\n            var so = y * sw + x;\r\n            var a = 0;\r\n            for (var cy = 0; cy < side; cy++) {\r\n                for (var cx = 0; cx < side; cx++) {\r\n                    var scy = y + cy - halfSide;\r\n                    var scx = x + cx - halfSide;\r\n                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\r\n                        var srcOff = scy * sw + scx;\r\n                        var wt = weights[cy * side + cx];\r\n                        a += mask[srcOff] * wt;\r\n                    }\r\n                }\r\n            }\r\n            maskResult[so] = a === 255 * 8 ? 255 : 0;\r\n        }\r\n    }\r\n    return maskResult;\r\n}\r\nfunction dilateMask(mask, sw, sh) {\r\n    var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];\r\n    var side = Math.round(Math.sqrt(weights.length));\r\n    var halfSide = Math.floor(side / 2);\r\n    var maskResult = [];\r\n    for (var y = 0; y < sh; y++) {\r\n        for (var x = 0; x < sw; x++) {\r\n            var so = y * sw + x;\r\n            var a = 0;\r\n            for (var cy = 0; cy < side; cy++) {\r\n                for (var cx = 0; cx < side; cx++) {\r\n                    var scy = y + cy - halfSide;\r\n                    var scx = x + cx - halfSide;\r\n                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\r\n                        var srcOff = scy * sw + scx;\r\n                        var wt = weights[cy * side + cx];\r\n                        a += mask[srcOff] * wt;\r\n                    }\r\n                }\r\n            }\r\n            maskResult[so] = a >= 255 * 4 ? 255 : 0;\r\n        }\r\n    }\r\n    return maskResult;\r\n}\r\nfunction smoothEdgeMask(mask, sw, sh) {\r\n    var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];\r\n    var side = Math.round(Math.sqrt(weights.length));\r\n    var halfSide = Math.floor(side / 2);\r\n    var maskResult = [];\r\n    for (var y = 0; y < sh; y++) {\r\n        for (var x = 0; x < sw; x++) {\r\n            var so = y * sw + x;\r\n            var a = 0;\r\n            for (var cy = 0; cy < side; cy++) {\r\n                for (var cx = 0; cx < side; cx++) {\r\n                    var scy = y + cy - halfSide;\r\n                    var scx = x + cx - halfSide;\r\n                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\r\n                        var srcOff = scy * sw + scx;\r\n                        var wt = weights[cy * side + cx];\r\n                        a += mask[srcOff] * wt;\r\n                    }\r\n                }\r\n            }\r\n            maskResult[so] = a;\r\n        }\r\n    }\r\n    return maskResult;\r\n}\r\n/**\r\n * Mask Filter\r\n * @function\r\n * @name Mask\r\n * @memberof Konva.Filters\r\n * @param {Object} imageData\r\n * @example\r\n * node.cache();\r\n * node.filters([Konva.Filters.Mask]);\r\n * node.threshold(200);\r\n */\r\nexport var Mask = function (imageData) {\r\n    // Detect pixels close to the background color\r\n    var threshold = this.threshold(), mask = backgroundMask(imageData, threshold);\r\n    if (mask) {\r\n        // Erode\r\n        mask = erodeMask(mask, imageData.width, imageData.height);\r\n        // Dilate\r\n        mask = dilateMask(mask, imageData.width, imageData.height);\r\n        // Gradient\r\n        mask = smoothEdgeMask(mask, imageData.width, imageData.height);\r\n        // Apply mask\r\n        applyMask(imageData, mask);\r\n    }\r\n    return imageData;\r\n};\r\nFactory.addGetterSetter(Node, 'threshold', 0, getNumberValidator(), Factory.afterSetFilter);\r\n"}
