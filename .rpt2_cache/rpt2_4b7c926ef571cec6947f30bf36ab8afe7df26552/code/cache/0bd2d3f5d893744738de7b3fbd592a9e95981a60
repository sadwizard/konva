{"code":"import { Factory } from '../Factory';\r\nimport { Node } from '../Node';\r\nimport { Util } from '../Util';\r\nimport { getNumberValidator } from '../Validators';\r\n/**\r\n * Emboss Filter.\r\n * Pixastic Lib - Emboss filter - v0.1.0\r\n * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/\r\n * License: [http://www.pixastic.com/lib/license.txt]\r\n * @function\r\n * @memberof Konva.Filters\r\n * @param {Object} imageData\r\n * @example\r\n * node.cache();\r\n * node.filters([Konva.Filters.Emboss]);\r\n * node.embossStrength(0.8);\r\n * node.embossWhiteLevel(0.3);\r\n * node.embossDirection('right');\r\n * node.embossBlend(true);\r\n */\r\nexport var Emboss = function (imageData) {\r\n    // pixastic strength is between 0 and 10.  I want it between 0 and 1\r\n    // pixastic greyLevel is between 0 and 255.  I want it between 0 and 1.  Also,\r\n    // a max value of greyLevel yields a white emboss, and the min value yields a black\r\n    // emboss.  Therefore, I changed greyLevel to whiteLevel\r\n    var strength = this.embossStrength() * 10, greyLevel = this.embossWhiteLevel() * 255, direction = this.embossDirection(), blend = this.embossBlend(), dirY = 0, dirX = 0, data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;\r\n    switch (direction) {\r\n        case 'top-left':\r\n            dirY = -1;\r\n            dirX = -1;\r\n            break;\r\n        case 'top':\r\n            dirY = -1;\r\n            dirX = 0;\r\n            break;\r\n        case 'top-right':\r\n            dirY = -1;\r\n            dirX = 1;\r\n            break;\r\n        case 'right':\r\n            dirY = 0;\r\n            dirX = 1;\r\n            break;\r\n        case 'bottom-right':\r\n            dirY = 1;\r\n            dirX = 1;\r\n            break;\r\n        case 'bottom':\r\n            dirY = 1;\r\n            dirX = 0;\r\n            break;\r\n        case 'bottom-left':\r\n            dirY = 1;\r\n            dirX = -1;\r\n            break;\r\n        case 'left':\r\n            dirY = 0;\r\n            dirX = -1;\r\n            break;\r\n        default:\r\n            Util.error('Unknown emboss direction: ' + direction);\r\n    }\r\n    do {\r\n        var offsetY = (y - 1) * w4;\r\n        var otherY = dirY;\r\n        if (y + otherY < 1) {\r\n            otherY = 0;\r\n        }\r\n        if (y + otherY > h) {\r\n            otherY = 0;\r\n        }\r\n        var offsetYOther = (y - 1 + otherY) * w * 4;\r\n        var x = w;\r\n        do {\r\n            var offset = offsetY + (x - 1) * 4;\r\n            var otherX = dirX;\r\n            if (x + otherX < 1) {\r\n                otherX = 0;\r\n            }\r\n            if (x + otherX > w) {\r\n                otherX = 0;\r\n            }\r\n            var offsetOther = offsetYOther + (x - 1 + otherX) * 4;\r\n            var dR = data[offset] - data[offsetOther];\r\n            var dG = data[offset + 1] - data[offsetOther + 1];\r\n            var dB = data[offset + 2] - data[offsetOther + 2];\r\n            var dif = dR;\r\n            var absDif = dif > 0 ? dif : -dif;\r\n            var absG = dG > 0 ? dG : -dG;\r\n            var absB = dB > 0 ? dB : -dB;\r\n            if (absG > absDif) {\r\n                dif = dG;\r\n            }\r\n            if (absB > absDif) {\r\n                dif = dB;\r\n            }\r\n            dif *= strength;\r\n            if (blend) {\r\n                var r = data[offset] + dif;\r\n                var g = data[offset + 1] + dif;\r\n                var b = data[offset + 2] + dif;\r\n                data[offset] = r > 255 ? 255 : r < 0 ? 0 : r;\r\n                data[offset + 1] = g > 255 ? 255 : g < 0 ? 0 : g;\r\n                data[offset + 2] = b > 255 ? 255 : b < 0 ? 0 : b;\r\n            }\r\n            else {\r\n                var grey = greyLevel - dif;\r\n                if (grey < 0) {\r\n                    grey = 0;\r\n                }\r\n                else if (grey > 255) {\r\n                    grey = 255;\r\n                }\r\n                data[offset] = data[offset + 1] = data[offset + 2] = grey;\r\n            }\r\n        } while (--x);\r\n    } while (--y);\r\n};\r\nFactory.addGetterSetter(Node, 'embossStrength', 0.5, getNumberValidator(), Factory.afterSetFilter);\r\n/**\r\n * get/set emboss strength. Use with {@link Konva.Filters.Emboss} filter.\r\n * @name Konva.Node#embossStrength\r\n * @method\r\n * @param {Number} level between 0 and 1.  Default is 0.5\r\n * @returns {Number}\r\n */\r\nFactory.addGetterSetter(Node, 'embossWhiteLevel', 0.5, getNumberValidator(), Factory.afterSetFilter);\r\n/**\r\n * get/set emboss white level. Use with {@link Konva.Filters.Emboss} filter.\r\n * @name Konva.Node#embossWhiteLevel\r\n * @method\r\n * @param {Number} embossWhiteLevel between 0 and 1.  Default is 0.5\r\n * @returns {Number}\r\n */\r\nFactory.addGetterSetter(Node, 'embossDirection', 'top-left', null, Factory.afterSetFilter);\r\n/**\r\n * get/set emboss direction. Use with {@link Konva.Filters.Emboss} filter.\r\n * @name Konva.Node#embossDirection\r\n * @method\r\n * @param {String} embossDirection can be top-left, top, top-right, right, bottom-right, bottom, bottom-left or left\r\n *   The default is top-left\r\n * @returns {String}\r\n */\r\nFactory.addGetterSetter(Node, 'embossBlend', false, null, Factory.afterSetFilter);\r\n/**\r\n * get/set emboss blend. Use with {@link Konva.Filters.Emboss} filter.\r\n * @name Konva.Node#embossBlend\r\n * @method\r\n * @param {Boolean} embossBlend\r\n * @returns {Boolean}\r\n */\r\n"}
