{"code":"import { Factory } from '../Factory';\r\nimport { Node } from '../Node';\r\nimport { getNumberValidator } from '../Validators';\r\n/*\r\n the Gauss filter\r\n master repo: https://github.com/pavelpower/kineticjsGaussFilter\r\n*/\r\n/*\r\n\n     StackBlur - a fast almost Gaussian Blur For Canvas\r\n\n     Version:   0.5\r\n     Author:    Mario Klingemann\r\n     Contact:   mario@quasimondo.com\r\n     Website:   http://www.quasimondo.com/StackBlurForCanvas\r\n     Twitter:   @quasimondo\r\n\n     In case you find this class useful - especially in commercial projects -\r\n     I am not totally unhappy for a small donation to my PayPal account\r\n     mario@quasimondo.de\r\n\n     Or support me on flattr:\r\n     https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\r\n\n     Copyright (c) 2010 Mario Klingemann\r\n\n     Permission is hereby granted, free of charge, to any person\r\n     obtaining a copy of this software and associated documentation\r\n     files (the \"Software\"), to deal in the Software without\r\n     restriction, including without limitation the rights to use,\r\n     copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n     copies of the Software, and to permit persons to whom the\r\n     Software is furnished to do so, subject to the following\r\n     conditions:\r\n\n     The above copyright notice and this permission notice shall be\r\n     included in all copies or substantial portions of the Software.\r\n\n     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n     OTHER DEALINGS IN THE SOFTWARE.\r\n     */\r\nfunction BlurStack() {\r\n    this.r = 0;\r\n    this.g = 0;\r\n    this.b = 0;\r\n    this.a = 0;\r\n    this.next = null;\r\n}\r\nvar mul_table = [\r\n    512,\r\n    512,\r\n    456,\r\n    512,\r\n    328,\r\n    456,\r\n    335,\r\n    512,\r\n    405,\r\n    328,\r\n    271,\r\n    456,\r\n    388,\r\n    335,\r\n    292,\r\n    512,\r\n    454,\r\n    405,\r\n    364,\r\n    328,\r\n    298,\r\n    271,\r\n    496,\r\n    456,\r\n    420,\r\n    388,\r\n    360,\r\n    335,\r\n    312,\r\n    292,\r\n    273,\r\n    512,\r\n    482,\r\n    454,\r\n    428,\r\n    405,\r\n    383,\r\n    364,\r\n    345,\r\n    328,\r\n    312,\r\n    298,\r\n    284,\r\n    271,\r\n    259,\r\n    496,\r\n    475,\r\n    456,\r\n    437,\r\n    420,\r\n    404,\r\n    388,\r\n    374,\r\n    360,\r\n    347,\r\n    335,\r\n    323,\r\n    312,\r\n    302,\r\n    292,\r\n    282,\r\n    273,\r\n    265,\r\n    512,\r\n    497,\r\n    482,\r\n    468,\r\n    454,\r\n    441,\r\n    428,\r\n    417,\r\n    405,\r\n    394,\r\n    383,\r\n    373,\r\n    364,\r\n    354,\r\n    345,\r\n    337,\r\n    328,\r\n    320,\r\n    312,\r\n    305,\r\n    298,\r\n    291,\r\n    284,\r\n    278,\r\n    271,\r\n    265,\r\n    259,\r\n    507,\r\n    496,\r\n    485,\r\n    475,\r\n    465,\r\n    456,\r\n    446,\r\n    437,\r\n    428,\r\n    420,\r\n    412,\r\n    404,\r\n    396,\r\n    388,\r\n    381,\r\n    374,\r\n    367,\r\n    360,\r\n    354,\r\n    347,\r\n    341,\r\n    335,\r\n    329,\r\n    323,\r\n    318,\r\n    312,\r\n    307,\r\n    302,\r\n    297,\r\n    292,\r\n    287,\r\n    282,\r\n    278,\r\n    273,\r\n    269,\r\n    265,\r\n    261,\r\n    512,\r\n    505,\r\n    497,\r\n    489,\r\n    482,\r\n    475,\r\n    468,\r\n    461,\r\n    454,\r\n    447,\r\n    441,\r\n    435,\r\n    428,\r\n    422,\r\n    417,\r\n    411,\r\n    405,\r\n    399,\r\n    394,\r\n    389,\r\n    383,\r\n    378,\r\n    373,\r\n    368,\r\n    364,\r\n    359,\r\n    354,\r\n    350,\r\n    345,\r\n    341,\r\n    337,\r\n    332,\r\n    328,\r\n    324,\r\n    320,\r\n    316,\r\n    312,\r\n    309,\r\n    305,\r\n    301,\r\n    298,\r\n    294,\r\n    291,\r\n    287,\r\n    284,\r\n    281,\r\n    278,\r\n    274,\r\n    271,\r\n    268,\r\n    265,\r\n    262,\r\n    259,\r\n    257,\r\n    507,\r\n    501,\r\n    496,\r\n    491,\r\n    485,\r\n    480,\r\n    475,\r\n    470,\r\n    465,\r\n    460,\r\n    456,\r\n    451,\r\n    446,\r\n    442,\r\n    437,\r\n    433,\r\n    428,\r\n    424,\r\n    420,\r\n    416,\r\n    412,\r\n    408,\r\n    404,\r\n    400,\r\n    396,\r\n    392,\r\n    388,\r\n    385,\r\n    381,\r\n    377,\r\n    374,\r\n    370,\r\n    367,\r\n    363,\r\n    360,\r\n    357,\r\n    354,\r\n    350,\r\n    347,\r\n    344,\r\n    341,\r\n    338,\r\n    335,\r\n    332,\r\n    329,\r\n    326,\r\n    323,\r\n    320,\r\n    318,\r\n    315,\r\n    312,\r\n    310,\r\n    307,\r\n    304,\r\n    302,\r\n    299,\r\n    297,\r\n    294,\r\n    292,\r\n    289,\r\n    287,\r\n    285,\r\n    282,\r\n    280,\r\n    278,\r\n    275,\r\n    273,\r\n    271,\r\n    269,\r\n    267,\r\n    265,\r\n    263,\r\n    261,\r\n    259\r\n];\r\nvar shg_table = [\r\n    9,\r\n    11,\r\n    12,\r\n    13,\r\n    13,\r\n    14,\r\n    14,\r\n    15,\r\n    15,\r\n    15,\r\n    15,\r\n    16,\r\n    16,\r\n    16,\r\n    16,\r\n    17,\r\n    17,\r\n    17,\r\n    17,\r\n    17,\r\n    17,\r\n    17,\r\n    18,\r\n    18,\r\n    18,\r\n    18,\r\n    18,\r\n    18,\r\n    18,\r\n    18,\r\n    18,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    19,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    20,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    21,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    22,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    23,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24,\r\n    24\r\n];\r\nfunction filterGaussBlurRGBA(imageData, radius) {\r\n    var pixels = imageData.data, width = imageData.width, height = imageData.height;\r\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;\r\n    var div = radius + radius + 1, widthMinus1 = width - 1, heightMinus1 = height - 1, radiusPlus1 = radius + 1, sumFactor = (radiusPlus1 * (radiusPlus1 + 1)) / 2, stackStart = new BlurStack(), stackEnd = null, stack = stackStart, stackIn = null, stackOut = null, mul_sum = mul_table[radius], shg_sum = shg_table[radius];\r\n    for (i = 1; i < div; i++) {\r\n        stack = stack.next = new BlurStack();\r\n        if (i === radiusPlus1) {\r\n            stackEnd = stack;\r\n        }\r\n    }\r\n    stack.next = stackStart;\r\n    yw = yi = 0;\r\n    for (y = 0; y < height; y++) {\r\n        r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\r\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\r\n        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\r\n        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\r\n        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\r\n        r_sum += sumFactor * pr;\r\n        g_sum += sumFactor * pg;\r\n        b_sum += sumFactor * pb;\r\n        a_sum += sumFactor * pa;\r\n        stack = stackStart;\r\n        for (i = 0; i < radiusPlus1; i++) {\r\n            stack.r = pr;\r\n            stack.g = pg;\r\n            stack.b = pb;\r\n            stack.a = pa;\r\n            stack = stack.next;\r\n        }\r\n        for (i = 1; i < radiusPlus1; i++) {\r\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\r\n            r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\r\n            g_sum += (stack.g = pg = pixels[p + 1]) * rbs;\r\n            b_sum += (stack.b = pb = pixels[p + 2]) * rbs;\r\n            a_sum += (stack.a = pa = pixels[p + 3]) * rbs;\r\n            r_in_sum += pr;\r\n            g_in_sum += pg;\r\n            b_in_sum += pb;\r\n            a_in_sum += pa;\r\n            stack = stack.next;\r\n        }\r\n        stackIn = stackStart;\r\n        stackOut = stackEnd;\r\n        for (x = 0; x < width; x++) {\r\n            pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;\r\n            if (pa !== 0) {\r\n                pa = 255 / pa;\r\n                pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;\r\n                pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\r\n                pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\r\n            }\r\n            else {\r\n                pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\r\n            }\r\n            r_sum -= r_out_sum;\r\n            g_sum -= g_out_sum;\r\n            b_sum -= b_out_sum;\r\n            a_sum -= a_out_sum;\r\n            r_out_sum -= stackIn.r;\r\n            g_out_sum -= stackIn.g;\r\n            b_out_sum -= stackIn.b;\r\n            a_out_sum -= stackIn.a;\r\n            p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\r\n            r_in_sum += stackIn.r = pixels[p];\r\n            g_in_sum += stackIn.g = pixels[p + 1];\r\n            b_in_sum += stackIn.b = pixels[p + 2];\r\n            a_in_sum += stackIn.a = pixels[p + 3];\r\n            r_sum += r_in_sum;\r\n            g_sum += g_in_sum;\r\n            b_sum += b_in_sum;\r\n            a_sum += a_in_sum;\r\n            stackIn = stackIn.next;\r\n            r_out_sum += pr = stackOut.r;\r\n            g_out_sum += pg = stackOut.g;\r\n            b_out_sum += pb = stackOut.b;\r\n            a_out_sum += pa = stackOut.a;\r\n            r_in_sum -= pr;\r\n            g_in_sum -= pg;\r\n            b_in_sum -= pb;\r\n            a_in_sum -= pa;\r\n            stackOut = stackOut.next;\r\n            yi += 4;\r\n        }\r\n        yw += width;\r\n    }\r\n    for (x = 0; x < width; x++) {\r\n        g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\r\n        yi = x << 2;\r\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\r\n        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\r\n        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\r\n        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\r\n        r_sum += sumFactor * pr;\r\n        g_sum += sumFactor * pg;\r\n        b_sum += sumFactor * pb;\r\n        a_sum += sumFactor * pa;\r\n        stack = stackStart;\r\n        for (i = 0; i < radiusPlus1; i++) {\r\n            stack.r = pr;\r\n            stack.g = pg;\r\n            stack.b = pb;\r\n            stack.a = pa;\r\n            stack = stack.next;\r\n        }\r\n        yp = width;\r\n        for (i = 1; i <= radius; i++) {\r\n            yi = (yp + x) << 2;\r\n            r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\r\n            g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;\r\n            b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;\r\n            a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;\r\n            r_in_sum += pr;\r\n            g_in_sum += pg;\r\n            b_in_sum += pb;\r\n            a_in_sum += pa;\r\n            stack = stack.next;\r\n            if (i < heightMinus1) {\r\n                yp += width;\r\n            }\r\n        }\r\n        yi = x;\r\n        stackIn = stackStart;\r\n        stackOut = stackEnd;\r\n        for (y = 0; y < height; y++) {\r\n            p = yi << 2;\r\n            pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;\r\n            if (pa > 0) {\r\n                pa = 255 / pa;\r\n                pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;\r\n                pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\r\n                pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\r\n            }\r\n            else {\r\n                pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\r\n            }\r\n            r_sum -= r_out_sum;\r\n            g_sum -= g_out_sum;\r\n            b_sum -= b_out_sum;\r\n            a_sum -= a_out_sum;\r\n            r_out_sum -= stackIn.r;\r\n            g_out_sum -= stackIn.g;\r\n            b_out_sum -= stackIn.b;\r\n            a_out_sum -= stackIn.a;\r\n            p =\r\n                (x +\r\n                    ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width) <<\r\n                    2;\r\n            r_sum += r_in_sum += stackIn.r = pixels[p];\r\n            g_sum += g_in_sum += stackIn.g = pixels[p + 1];\r\n            b_sum += b_in_sum += stackIn.b = pixels[p + 2];\r\n            a_sum += a_in_sum += stackIn.a = pixels[p + 3];\r\n            stackIn = stackIn.next;\r\n            r_out_sum += pr = stackOut.r;\r\n            g_out_sum += pg = stackOut.g;\r\n            b_out_sum += pb = stackOut.b;\r\n            a_out_sum += pa = stackOut.a;\r\n            r_in_sum -= pr;\r\n            g_in_sum -= pg;\r\n            b_in_sum -= pb;\r\n            a_in_sum -= pa;\r\n            stackOut = stackOut.next;\r\n            yi += width;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Blur Filter\r\n * @function\r\n * @name Blur\r\n * @memberof Konva.Filters\r\n * @param {Object} imageData\r\n * @example\r\n * node.cache();\r\n * node.filters([Konva.Filters.Blur]);\r\n * node.blurRadius(10);\r\n */\r\nexport var Blur = function Blur(imageData) {\r\n    var radius = Math.round(this.blurRadius());\r\n    if (radius > 0) {\r\n        filterGaussBlurRGBA(imageData, radius);\r\n    }\r\n};\r\nFactory.addGetterSetter(Node, 'blurRadius', 0, getNumberValidator(), Factory.afterSetFilter);\r\n/**\r\n * get/set blur radius. Use with {@link Konva.Filters.Blur} filter\r\n * @name Konva.Node#blurRadius\r\n * @method\r\n * @param {Integer} radius\r\n * @returns {Integer}\r\n */\r\n"}
