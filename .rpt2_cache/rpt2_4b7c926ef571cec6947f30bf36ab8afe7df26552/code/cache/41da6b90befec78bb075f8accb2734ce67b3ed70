{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Util, Collection } from './Util';\r\nimport { Factory } from './Factory';\r\nimport { Node } from './Node';\r\nimport { DD } from './DragAndDrop';\r\nimport { getNumberValidator } from './Validators';\r\n/**\r\n * Container constructor.&nbsp; Containers are used to contain nodes or other containers\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Node\r\n * @abstract\r\n * @param {Object} config\r\n * @@nodeParams\r\n * @@containerParams\r\n */\r\nvar Container = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Container, _super);\r\n    function Container() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.children = new Collection();\r\n        return _this;\r\n    }\r\n    /**\r\n     * returns a {@link Konva.Collection} of direct descendant nodes\r\n     * @method\r\n     * @name Konva.Container#getChildren\r\n     * @param {Function} [filterFunc] filter function\r\n     * @returns {Konva.Collection}\r\n     * @example\r\n     * // get all children\r\n     * var children = layer.getChildren();\r\n     *\r\n     * // get only circles\r\n     * var circles = layer.getChildren(function(node){\r\n     *    return node.getClassName() === 'Circle';\r\n     * });\r\n     */\r\n    Container.prototype.getChildren = function (filterFunc) {\r\n        if (!filterFunc) {\r\n            return this.children;\r\n        }\r\n        var results = new Collection();\r\n        this.children.each(function (child) {\r\n            if (filterFunc(child)) {\r\n                results.push(child);\r\n            }\r\n        });\r\n        return results;\r\n    };\r\n    /**\r\n     * determine if node has children\r\n     * @method\r\n     * @name Konva.Container#hasChildren\r\n     * @returns {Boolean}\r\n     */\r\n    Container.prototype.hasChildren = function () {\r\n        return this.getChildren().length > 0;\r\n    };\r\n    /**\r\n     * remove all children\r\n     * @method\r\n     * @name Konva.Container#removeChildren\r\n     */\r\n    Container.prototype.removeChildren = function () {\r\n        var child;\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            child = this.children[i];\r\n            // reset parent to prevent many _setChildrenIndices calls\r\n            child.parent = null;\r\n            child.index = 0;\r\n            child.remove();\r\n        }\r\n        this.children = new Collection();\r\n        return this;\r\n    };\r\n    /**\r\n     * destroy all children\r\n     * @method\r\n     * @name Konva.Container#destroyChildren\r\n     */\r\n    Container.prototype.destroyChildren = function () {\r\n        var child;\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            child = this.children[i];\r\n            // reset parent to prevent many _setChildrenIndices calls\r\n            child.parent = null;\r\n            child.index = 0;\r\n            child.destroy();\r\n        }\r\n        this.children = new Collection();\r\n        return this;\r\n    };\r\n    /**\r\n     * add a child and children into container\r\n     * @name Konva.Container#add\r\n     * @method\r\n     * @param {...Konva.Node} child\r\n     * @returns {Container}\r\n     * @example\r\n     * layer.add(rect);\r\n     * layer.add(shape1, shape2, shape3);\r\n     * // remember to redraw layer if you changed something\r\n     * layer.draw();\r\n     */\r\n    Container.prototype.add = function (child) {\r\n        if (arguments.length > 1) {\r\n            for (var i = 0; i < arguments.length; i++) {\r\n                this.add(arguments[i]);\r\n            }\r\n            return this;\r\n        }\r\n        if (child.getParent()) {\r\n            child.moveTo(this);\r\n            return this;\r\n        }\r\n        var children = this.children;\r\n        this._validateAdd(child);\r\n        child.index = children.length;\r\n        child.parent = this;\r\n        children.push(child);\r\n        this._fire('add', {\r\n            child: child\r\n        });\r\n        // if node under drag we need to update drag animation\r\n        if (child.isDragging()) {\r\n            DD.anim.setLayers(child.getLayer());\r\n        }\r\n        // chainable\r\n        return this;\r\n    };\r\n    Container.prototype.destroy = function () {\r\n        if (this.hasChildren()) {\r\n            this.destroyChildren();\r\n        }\r\n        _super.prototype.destroy.call(this);\r\n        return this;\r\n    };\r\n    /**\r\n     * return a {@link Konva.Collection} of nodes that match the selector.\r\n     * You can provide a string with '#' for id selections and '.' for name selections.\r\n     * Or a function that will return true/false when a node is passed through.  See example below.\r\n     * With strings you can also select by type or class name. Pass multiple selectors\r\n     * separated by a space.\r\n     * @method\r\n     * @name Konva.Container#find\r\n     * @param {String | Function} selector\r\n     * @returns {Collection}\r\n     * @example\r\n     *\r\n     * Passing a string as a selector\r\n     * // select node with id foo\r\n     * var node = stage.find('#foo');\r\n     *\r\n     * // select nodes with name bar inside layer\r\n     * var nodes = layer.find('.bar');\r\n     *\r\n     * // select all groups inside layer\r\n     * var nodes = layer.find('Group');\r\n     *\r\n     * // select all rectangles inside layer\r\n     * var nodes = layer.find('Rect');\r\n     *\r\n     * // select node with an id of foo or a name of bar inside layer\r\n     * var nodes = layer.find('#foo, .bar');\r\n     *\r\n     * Passing a function as a selector\r\n     *\r\n     * // get all groups with a function\r\n     * var groups = stage.find(node => {\r\n     *  return node.getType() === 'Group';\r\n     * });\r\n     *\r\n     * // get only Nodes with partial opacity\r\n     * var alphaNodes = layer.find(node => {\r\n     *  return node.getType() === 'Node' && node.getAbsoluteOpacity() < 1;\r\n     * });\r\n     */\r\n    Container.prototype.find = function (selector) {\r\n        // protecting _generalFind to prevent user from accidentally adding\r\n        // second argument and getting unexpected `findOne` result\r\n        return this._generalFind(selector, false);\r\n    };\r\n    Container.prototype.get = function (selector) {\r\n        Util.warn('collection.get() method is deprecated. Please use collection.find() instead.');\r\n        return this.find(selector);\r\n    };\r\n    /**\r\n     * return a first node from `find` method\r\n     * @method\r\n     * @name Konva.Container#findOne\r\n     * @param {String | Function} selector\r\n     * @returns {Konva.Node | Undefined}\r\n     * @example\r\n     * // select node with id foo\r\n     * var node = stage.findOne('#foo');\r\n     *\r\n     * // select node with name bar inside layer\r\n     * var nodes = layer.findOne('.bar');\r\n     *\r\n     * // select the first node to return true in a function\r\n     * var node = stage.findOne(node => {\r\n     *  return node.getType() === 'Shape'\r\n     * })\r\n     */\r\n    Container.prototype.findOne = function (selector) {\r\n        var result = this._generalFind(selector, true);\r\n        return result.length > 0 ? result[0] : undefined;\r\n    };\r\n    Container.prototype._generalFind = function (selector, findOne) {\r\n        var retArr = [];\r\n        this._descendants(function (node) {\r\n            var valid = node._isMatch(selector);\r\n            if (valid) {\r\n                retArr.push(node);\r\n            }\r\n            if (valid && findOne) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return Collection.toCollection(retArr);\r\n    };\r\n    Container.prototype._descendants = function (fn) {\r\n        var shouldStop = false;\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            var child = this.children[i];\r\n            shouldStop = fn(child);\r\n            if (shouldStop) {\r\n                return true;\r\n            }\r\n            if (!child.hasChildren()) {\r\n                continue;\r\n            }\r\n            shouldStop = child._descendants(fn);\r\n            if (shouldStop) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    // extenders\r\n    Container.prototype.toObject = function () {\r\n        var obj = Node.prototype.toObject.call(this);\r\n        obj.children = [];\r\n        var children = this.getChildren();\r\n        var len = children.length;\r\n        for (var n = 0; n < len; n++) {\r\n            var child = children[n];\r\n            obj.children.push(child.toObject());\r\n        }\r\n        return obj;\r\n    };\r\n    Container.prototype._getDescendants = function (arr) {\r\n        var retArr = [];\r\n        var len = arr.length;\r\n        for (var n = 0; n < len; n++) {\r\n            var node = arr[n];\r\n            if (this.isAncestorOf(node)) {\r\n                retArr.push(node);\r\n            }\r\n        }\r\n        return retArr;\r\n    };\r\n    /**\r\n     * determine if node is an ancestor\r\n     * of descendant\r\n     * @method\r\n     * @name Konva.Container#isAncestorOf\r\n     * @param {Konva.Node} node\r\n     */\r\n    Container.prototype.isAncestorOf = function (node) {\r\n        var parent = node.getParent();\r\n        while (parent) {\r\n            if (parent._id === this._id) {\r\n                return true;\r\n            }\r\n            parent = parent.getParent();\r\n        }\r\n        return false;\r\n    };\r\n    Container.prototype.clone = function (obj) {\r\n        // call super method\r\n        var node = Node.prototype.clone.call(this, obj);\r\n        this.getChildren().each(function (no) {\r\n            node.add(no.clone());\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * get all shapes that intersect a point.  Note: because this method must clear a temporary\r\n     * canvas and redraw every shape inside the container, it should only be used for special situations\r\n     * because it performs very poorly.  Please use the {@link Konva.Stage#getIntersection} method if at all possible\r\n     * because it performs much better\r\n     * @method\r\n     * @name Konva.Container#getIntersection\r\n     * @param {Object} pos\r\n     * @param {Number} pos.x\r\n     * @param {Number} pos.y\r\n     * @returns {Array} array of shapes\r\n     */\r\n    Container.prototype.getAllIntersections = function (pos) {\r\n        var arr = [];\r\n        this.find('Shape').each(function (shape) {\r\n            if (shape.isVisible() && shape.intersects(pos)) {\r\n                arr.push(shape);\r\n            }\r\n        });\r\n        return arr;\r\n    };\r\n    Container.prototype._setChildrenIndices = function () {\r\n        this.children.each(function (child, n) {\r\n            child.index = n;\r\n        });\r\n    };\r\n    Container.prototype.drawScene = function (can, top, caching) {\r\n        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas()), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;\r\n        if (this.isVisible() || caching) {\r\n            if (!caching && cachedSceneCanvas) {\r\n                context.save();\r\n                layer._applyTransform(this, context, top);\r\n                this._drawCachedSceneCanvas(context);\r\n                context.restore();\r\n            }\r\n            else {\r\n                // TODO: comment all arguments here\r\n                // describe why we use false for caching\r\n                // and why we use caching for skipBuffer, skipComposition\r\n                this._drawChildren(canvas, 'drawScene', top, false, caching, caching);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Container.prototype.drawHit = function (can, top, caching) {\r\n        var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;\r\n        if (this.shouldDrawHit(canvas) || caching) {\r\n            if (!caching && cachedHitCanvas) {\r\n                context.save();\r\n                layer._applyTransform(this, context, top);\r\n                this._drawCachedHitCanvas(context);\r\n                context.restore();\r\n            }\r\n            else {\r\n                // TODO: comment all arguments here\r\n                // describe why we use false for caching\r\n                // and why we use caching for skipBuffer, skipComposition\r\n                this._drawChildren(canvas, 'drawHit', top, false, caching, caching);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    // TODO: create ClipContainer\r\n    Container.prototype._drawChildren = function (canvas, drawMethod, top, caching, skipBuffer, skipComposition) {\r\n        var layer = this.getLayer(), context = canvas && canvas.getContext(), clipWidth = this.clipWidth(), clipHeight = this.clipHeight(), clipFunc = this.clipFunc(), hasClip = (clipWidth && clipHeight) || clipFunc, clipX, clipY;\r\n        if (hasClip && layer) {\r\n            context.save();\r\n            var transform = this.getAbsoluteTransform(top);\r\n            var m = transform.getMatrix();\r\n            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n            context.beginPath();\r\n            if (clipFunc) {\r\n                clipFunc.call(this, context, this);\r\n            }\r\n            else {\r\n                clipX = this.clipX();\r\n                clipY = this.clipY();\r\n                context.rect(clipX, clipY, clipWidth, clipHeight);\r\n            }\r\n            context.clip();\r\n            m = transform\r\n                .copy()\r\n                .invert()\r\n                .getMatrix();\r\n            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n        }\r\n        var hasComposition = this.globalCompositeOperation() !== 'source-over' && !skipComposition;\r\n        if (hasComposition && layer) {\r\n            context.save();\r\n            context._applyGlobalCompositeOperation(this);\r\n        }\r\n        this.children.each(function (child) {\r\n            child[drawMethod](canvas, top, caching, skipBuffer);\r\n        });\r\n        if (hasComposition && layer) {\r\n            context.restore();\r\n        }\r\n        if (hasClip && layer) {\r\n            context.restore();\r\n        }\r\n    };\r\n    Container.prototype.shouldDrawHit = function (canvas) {\r\n        var layer = this.getLayer();\r\n        var layerUnderDrag = DD.isDragging && DD.anim.getLayers().indexOf(layer) !== -1;\r\n        return ((canvas && canvas.isCache) ||\r\n            (layer && layer.hitGraphEnabled() && this.isVisible() && !layerUnderDrag));\r\n    };\r\n    Container.prototype.getClientRect = function (attrs) {\r\n        attrs = attrs || {};\r\n        var skipTransform = attrs.skipTransform;\r\n        var relativeTo = attrs.relativeTo;\r\n        var minX, minY, maxX, maxY;\r\n        var selfRect = {\r\n            x: Infinity,\r\n            y: Infinity,\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        var that = this;\r\n        this.children.each(function (child) {\r\n            // skip invisible children\r\n            if (!child.visible()) {\r\n                return;\r\n            }\r\n            var rect = child.getClientRect({\r\n                relativeTo: that,\r\n                skipShadow: attrs.skipShadow,\r\n                skipStroke: attrs.skipStroke\r\n            });\r\n            // skip invisible children (like empty groups)\r\n            if (rect.width === 0 && rect.height === 0) {\r\n                return;\r\n            }\r\n            if (minX === undefined) {\r\n                // initial value for first child\r\n                minX = rect.x;\r\n                minY = rect.y;\r\n                maxX = rect.x + rect.width;\r\n                maxY = rect.y + rect.height;\r\n            }\r\n            else {\r\n                minX = Math.min(minX, rect.x);\r\n                minY = Math.min(minY, rect.y);\r\n                maxX = Math.max(maxX, rect.x + rect.width);\r\n                maxY = Math.max(maxY, rect.y + rect.height);\r\n            }\r\n        });\r\n        // if child is group we need to make sure it has visible shapes inside\r\n        var shapes = this.find('Shape');\r\n        var hasVisible = false;\r\n        for (var i = 0; i < shapes.length; i++) {\r\n            var shape = shapes[i];\r\n            if (shape._isVisible(this)) {\r\n                hasVisible = true;\r\n                break;\r\n            }\r\n        }\r\n        if (hasVisible) {\r\n            selfRect = {\r\n                x: minX,\r\n                y: minY,\r\n                width: maxX - minX,\r\n                height: maxY - minY\r\n            };\r\n        }\r\n        else {\r\n            selfRect = {\r\n                x: 0,\r\n                y: 0,\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n        if (!skipTransform) {\r\n            return this._transformedRect(selfRect, relativeTo);\r\n        }\r\n        return selfRect;\r\n    };\r\n    return Container;\r\n}(Node));\r\nexport { Container };\r\n// add getters setters\r\nFactory.addComponentsGetterSetter(Container, 'clip', [\r\n    'x',\r\n    'y',\r\n    'width',\r\n    'height'\r\n]);\r\n/**\r\n * get/set clip\r\n * @method\r\n * @name Konva.Container#clip\r\n * @param {Object} clip\r\n * @param {Number} clip.x\r\n * @param {Number} clip.y\r\n * @param {Number} clip.width\r\n * @param {Number} clip.height\r\n * @returns {Object}\r\n * @example\r\n * // get clip\r\n * var clip = container.clip();\r\n *\r\n * // set clip\r\n * container.clip({\r\n *   x: 20,\r\n *   y: 20,\r\n *   width: 20,\r\n *   height: 20\r\n * });\r\n */\r\nFactory.addGetterSetter(Container, 'clipX', undefined, getNumberValidator());\r\n/**\r\n * get/set clip x\r\n * @name Konva.Container#clipX\r\n * @method\r\n * @param {Number} x\r\n * @returns {Number}\r\n * @example\r\n * // get clip x\r\n * var clipX = container.clipX();\r\n *\r\n * // set clip x\r\n * container.clipX(10);\r\n */\r\nFactory.addGetterSetter(Container, 'clipY', undefined, getNumberValidator());\r\n/**\r\n * get/set clip y\r\n * @name Konva.Container#clipY\r\n * @method\r\n * @param {Number} y\r\n * @returns {Number}\r\n * @example\r\n * // get clip y\r\n * var clipY = container.clipY();\r\n *\r\n * // set clip y\r\n * container.clipY(10);\r\n */\r\nFactory.addGetterSetter(Container, 'clipWidth', undefined, getNumberValidator());\r\n/**\r\n * get/set clip width\r\n * @name Konva.Container#clipWidth\r\n * @method\r\n * @param {Number} width\r\n * @returns {Number}\r\n * @example\r\n * // get clip width\r\n * var clipWidth = container.clipWidth();\r\n *\r\n * // set clip width\r\n * container.clipWidth(100);\r\n */\r\nFactory.addGetterSetter(Container, 'clipHeight', undefined, getNumberValidator());\r\n/**\r\n * get/set clip height\r\n * @name Konva.Container#clipHeight\r\n * @method\r\n * @param {Number} height\r\n * @returns {Number}\r\n * @example\r\n * // get clip height\r\n * var clipHeight = container.clipHeight();\r\n *\r\n * // set clip height\r\n * container.clipHeight(100);\r\n */\r\nFactory.addGetterSetter(Container, 'clipFunc');\r\n/**\r\n * get/set clip function\r\n * @name Konva.Container#clipFunc\r\n * @method\r\n * @param {Function} function\r\n * @returns {Function}\r\n * @example\r\n * // get clip function\r\n * var clipFunction = container.clipFunc();\r\n *\r\n * // set clip height\r\n * container.clipFunc(function(ctx) {\r\n *   ctx.rect(0, 0, 100, 100);\r\n * });\r\n */\r\nCollection.mapMethods(Container);\r\n"}
