{"code":"import { glob, Konva } from './Global';\r\n/**\r\n * Collection constructor. Collection extends Array.\r\n * This class is used in conjunction with {@link Konva.Container#find}\r\n * The good thing about collection is that it has ALL methods of all Konva nodes. Take a look into examples.\r\n * @constructor\r\n * @memberof Konva\r\n * @example\r\n *\r\n * // find all rectangles and return them as Collection\r\n * const shapes = layer.find('Rect');\r\n * // fill all rectangles with a single function\r\n * shapes.fill('red');\r\n */\r\nvar Collection = /** @class */ (function () {\r\n    function Collection() {\r\n    }\r\n    /**\r\n     * convert array into a collection\r\n     * @method\r\n     * @memberof Konva.Collection\r\n     * @param {Array} arr\r\n     */\r\n    Collection.toCollection = function (arr) {\r\n        var collection = new Collection(), len = arr.length, n;\r\n        for (n = 0; n < len; n++) {\r\n            collection.push(arr[n]);\r\n        }\r\n        return collection;\r\n    };\r\n    Collection._mapMethod = function (methodName) {\r\n        Collection.prototype[methodName] = function () {\r\n            var len = this.length, i;\r\n            var args = [].slice.call(arguments);\r\n            for (i = 0; i < len; i++) {\r\n                this[i][methodName].apply(this[i], args);\r\n            }\r\n            return this;\r\n        };\r\n    };\r\n    Collection.mapMethods = function (constructor) {\r\n        var prot = constructor.prototype;\r\n        for (var methodName in prot) {\r\n            Collection._mapMethod(methodName);\r\n        }\r\n    };\r\n    return Collection;\r\n}());\r\nexport { Collection };\r\nCollection.prototype = [];\r\n/**\r\n * iterate through node array and run a function for each node.\r\n *  The node and index is passed into the function\r\n * @method\r\n * @name Konva.Collection#each\r\n * @param {Function} func\r\n * @example\r\n * // get all nodes with name foo inside layer, and set x to 10 for each\r\n * layer.find('.foo').each(function(shape, n) {\r\n *   shape.setX(10);\r\n * });\r\n */\r\nCollection.prototype.each = function (func) {\r\n    for (var n = 0; n < this.length; n++) {\r\n        func(this[n], n);\r\n    }\r\n};\r\n/**\r\n * convert collection into an array\r\n * @method\r\n * @name Konva.Collection#toArray\r\n */\r\nCollection.prototype.toArray = function () {\r\n    var arr = [], len = this.length, n;\r\n    for (n = 0; n < len; n++) {\r\n        arr.push(this[n]);\r\n    }\r\n    return arr;\r\n};\r\n/*\r\n * Last updated November 2011\r\n * By Simon Sarris\r\n * www.simonsarris.com\r\n * sarris@acm.org\r\n *\r\n * Free to use and distribute at will\r\n * So long as you are nice to people, etc\r\n */\r\n/*\r\n * The usage of this class was inspired by some of the work done by a forked\r\n * project, KineticJS-Ext by Wappworks, which is based on Simon's Transform\r\n * class.  Modified by Eric Rowell\r\n */\r\n/**\r\n * Transform constructor.\r\n * In most of the cases you don't need to use it in your app. Because it is for internal usage in Konva core.\r\n * But there is a documentation for that class in case you still want\r\n * to make some manual calculations.\r\n * @constructor\r\n * @param {Array} [m] Optional six-element matrix\r\n * @memberof Konva\r\n */\r\nvar Transform = /** @class */ (function () {\r\n    function Transform(m) {\r\n        if (m === void 0) { m = [1, 0, 0, 1, 0, 0]; }\r\n        this.m = (m && m.slice()) || [1, 0, 0, 1, 0, 0];\r\n    }\r\n    /**\r\n     * Copy Konva.Transform object\r\n     * @method\r\n     * @name Konva.Transform#copy\r\n     * @returns {Konva.Transform}\r\n     * @example\r\n     * const tr = shape.getTransform().copy()\r\n     */\r\n    Transform.prototype.copy = function () {\r\n        return new Transform(this.m);\r\n    };\r\n    /**\r\n     * Transform point\r\n     * @method\r\n     * @name Konva.Transform#point\r\n     * @param {Object} point 2D point(x, y)\r\n     * @returns {Object} 2D point(x, y)\r\n     */\r\n    Transform.prototype.point = function (point) {\r\n        var m = this.m;\r\n        return {\r\n            x: m[0] * point.x + m[2] * point.y + m[4],\r\n            y: m[1] * point.x + m[3] * point.y + m[5]\r\n        };\r\n    };\r\n    /**\r\n     * Apply translation\r\n     * @method\r\n     * @name Konva.Transform#translate\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @returns {Konva.Transform}\r\n     */\r\n    Transform.prototype.translate = function (x, y) {\r\n        this.m[4] += this.m[0] * x + this.m[2] * y;\r\n        this.m[5] += this.m[1] * x + this.m[3] * y;\r\n        return this;\r\n    };\r\n    /**\r\n     * Apply scale\r\n     * @method\r\n     * @name Konva.Transform#scale\r\n     * @param {Number} sx\r\n     * @param {Number} sy\r\n     * @returns {Konva.Transform}\r\n     */\r\n    Transform.prototype.scale = function (sx, sy) {\r\n        this.m[0] *= sx;\r\n        this.m[1] *= sx;\r\n        this.m[2] *= sy;\r\n        this.m[3] *= sy;\r\n        return this;\r\n    };\r\n    /**\r\n     * Apply rotation\r\n     * @method\r\n     * @name Konva.Transform#rotate\r\n     * @param {Number} rad  Angle in radians\r\n     * @returns {Konva.Transform}\r\n     */\r\n    Transform.prototype.rotate = function (rad) {\r\n        var c = Math.cos(rad);\r\n        var s = Math.sin(rad);\r\n        var m11 = this.m[0] * c + this.m[2] * s;\r\n        var m12 = this.m[1] * c + this.m[3] * s;\r\n        var m21 = this.m[0] * -s + this.m[2] * c;\r\n        var m22 = this.m[1] * -s + this.m[3] * c;\r\n        this.m[0] = m11;\r\n        this.m[1] = m12;\r\n        this.m[2] = m21;\r\n        this.m[3] = m22;\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns the translation\r\n     * @method\r\n     * @name Konva.Transform#getTranslation\r\n     * @returns {Object} 2D point(x, y)\r\n     */\r\n    Transform.prototype.getTranslation = function () {\r\n        return {\r\n            x: this.m[4],\r\n            y: this.m[5]\r\n        };\r\n    };\r\n    /**\r\n     * Apply skew\r\n     * @method\r\n     * @name Konva.Transform#skew\r\n     * @param {Number} sx\r\n     * @param {Number} sy\r\n     * @returns {Konva.Transform}\r\n     */\r\n    Transform.prototype.skew = function (sx, sy) {\r\n        var m11 = this.m[0] + this.m[2] * sy;\r\n        var m12 = this.m[1] + this.m[3] * sy;\r\n        var m21 = this.m[2] + this.m[0] * sx;\r\n        var m22 = this.m[3] + this.m[1] * sx;\r\n        this.m[0] = m11;\r\n        this.m[1] = m12;\r\n        this.m[2] = m21;\r\n        this.m[3] = m22;\r\n        return this;\r\n    };\r\n    /**\r\n     * Transform multiplication\r\n     * @method\r\n     * @name Konva.Transform#multiply\r\n     * @param {Konva.Transform} matrix\r\n     * @returns {Konva.Transform}\r\n     */\r\n    Transform.prototype.multiply = function (matrix) {\r\n        var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];\r\n        var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];\r\n        var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];\r\n        var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];\r\n        var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];\r\n        var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];\r\n        this.m[0] = m11;\r\n        this.m[1] = m12;\r\n        this.m[2] = m21;\r\n        this.m[3] = m22;\r\n        this.m[4] = dx;\r\n        this.m[5] = dy;\r\n        return this;\r\n    };\r\n    /**\r\n     * Invert the matrix\r\n     * @method\r\n     * @name Konva.Transform#invert\r\n     * @returns {Konva.Transform}\r\n     */\r\n    Transform.prototype.invert = function () {\r\n        var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);\r\n        var m0 = this.m[3] * d;\r\n        var m1 = -this.m[1] * d;\r\n        var m2 = -this.m[2] * d;\r\n        var m3 = this.m[0] * d;\r\n        var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);\r\n        var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);\r\n        this.m[0] = m0;\r\n        this.m[1] = m1;\r\n        this.m[2] = m2;\r\n        this.m[3] = m3;\r\n        this.m[4] = m4;\r\n        this.m[5] = m5;\r\n        return this;\r\n    };\r\n    /**\r\n     * return matrix\r\n     * @method\r\n     * @name Konva.Transform#getMatrix\r\n     */\r\n    Transform.prototype.getMatrix = function () {\r\n        return this.m;\r\n    };\r\n    /**\r\n     * set to absolute position via translation\r\n     * @method\r\n     * @name Konva.Transform#setAbsolutePosition\r\n     * @returns {Konva.Transform}\r\n     * @author ericdrowell\r\n     */\r\n    Transform.prototype.setAbsolutePosition = function (x, y) {\r\n        var m0 = this.m[0], m1 = this.m[1], m2 = this.m[2], m3 = this.m[3], m4 = this.m[4], m5 = this.m[5], yt = (m0 * (y - m5) - m1 * (x - m4)) / (m0 * m3 - m1 * m2), xt = (x - m4 - m2 * yt) / m0;\r\n        return this.translate(xt, yt);\r\n    };\r\n    return Transform;\r\n}());\r\nexport { Transform };\r\n// CONSTANTS\r\nvar OBJECT_ARRAY = '[object Array]', OBJECT_NUMBER = '[object Number]', OBJECT_STRING = '[object String]', OBJECT_BOOLEAN = '[object Boolean]', PI_OVER_DEG180 = Math.PI / 180, DEG180_OVER_PI = 180 / Math.PI, HASH = '#', EMPTY_STRING = '', ZERO = '0', KONVA_WARNING = 'Konva warning: ', KONVA_ERROR = 'Konva error: ', RGB_PAREN = 'rgb(', COLORS = {\r\n    aliceblue: [240, 248, 255],\r\n    antiquewhite: [250, 235, 215],\r\n    aqua: [0, 255, 255],\r\n    aquamarine: [127, 255, 212],\r\n    azure: [240, 255, 255],\r\n    beige: [245, 245, 220],\r\n    bisque: [255, 228, 196],\r\n    black: [0, 0, 0],\r\n    blanchedalmond: [255, 235, 205],\r\n    blue: [0, 0, 255],\r\n    blueviolet: [138, 43, 226],\r\n    brown: [165, 42, 42],\r\n    burlywood: [222, 184, 135],\r\n    cadetblue: [95, 158, 160],\r\n    chartreuse: [127, 255, 0],\r\n    chocolate: [210, 105, 30],\r\n    coral: [255, 127, 80],\r\n    cornflowerblue: [100, 149, 237],\r\n    cornsilk: [255, 248, 220],\r\n    crimson: [220, 20, 60],\r\n    cyan: [0, 255, 255],\r\n    darkblue: [0, 0, 139],\r\n    darkcyan: [0, 139, 139],\r\n    darkgoldenrod: [184, 132, 11],\r\n    darkgray: [169, 169, 169],\r\n    darkgreen: [0, 100, 0],\r\n    darkgrey: [169, 169, 169],\r\n    darkkhaki: [189, 183, 107],\r\n    darkmagenta: [139, 0, 139],\r\n    darkolivegreen: [85, 107, 47],\r\n    darkorange: [255, 140, 0],\r\n    darkorchid: [153, 50, 204],\r\n    darkred: [139, 0, 0],\r\n    darksalmon: [233, 150, 122],\r\n    darkseagreen: [143, 188, 143],\r\n    darkslateblue: [72, 61, 139],\r\n    darkslategray: [47, 79, 79],\r\n    darkslategrey: [47, 79, 79],\r\n    darkturquoise: [0, 206, 209],\r\n    darkviolet: [148, 0, 211],\r\n    deeppink: [255, 20, 147],\r\n    deepskyblue: [0, 191, 255],\r\n    dimgray: [105, 105, 105],\r\n    dimgrey: [105, 105, 105],\r\n    dodgerblue: [30, 144, 255],\r\n    firebrick: [178, 34, 34],\r\n    floralwhite: [255, 255, 240],\r\n    forestgreen: [34, 139, 34],\r\n    fuchsia: [255, 0, 255],\r\n    gainsboro: [220, 220, 220],\r\n    ghostwhite: [248, 248, 255],\r\n    gold: [255, 215, 0],\r\n    goldenrod: [218, 165, 32],\r\n    gray: [128, 128, 128],\r\n    green: [0, 128, 0],\r\n    greenyellow: [173, 255, 47],\r\n    grey: [128, 128, 128],\r\n    honeydew: [240, 255, 240],\r\n    hotpink: [255, 105, 180],\r\n    indianred: [205, 92, 92],\r\n    indigo: [75, 0, 130],\r\n    ivory: [255, 255, 240],\r\n    khaki: [240, 230, 140],\r\n    lavender: [230, 230, 250],\r\n    lavenderblush: [255, 240, 245],\r\n    lawngreen: [124, 252, 0],\r\n    lemonchiffon: [255, 250, 205],\r\n    lightblue: [173, 216, 230],\r\n    lightcoral: [240, 128, 128],\r\n    lightcyan: [224, 255, 255],\r\n    lightgoldenrodyellow: [250, 250, 210],\r\n    lightgray: [211, 211, 211],\r\n    lightgreen: [144, 238, 144],\r\n    lightgrey: [211, 211, 211],\r\n    lightpink: [255, 182, 193],\r\n    lightsalmon: [255, 160, 122],\r\n    lightseagreen: [32, 178, 170],\r\n    lightskyblue: [135, 206, 250],\r\n    lightslategray: [119, 136, 153],\r\n    lightslategrey: [119, 136, 153],\r\n    lightsteelblue: [176, 196, 222],\r\n    lightyellow: [255, 255, 224],\r\n    lime: [0, 255, 0],\r\n    limegreen: [50, 205, 50],\r\n    linen: [250, 240, 230],\r\n    magenta: [255, 0, 255],\r\n    maroon: [128, 0, 0],\r\n    mediumaquamarine: [102, 205, 170],\r\n    mediumblue: [0, 0, 205],\r\n    mediumorchid: [186, 85, 211],\r\n    mediumpurple: [147, 112, 219],\r\n    mediumseagreen: [60, 179, 113],\r\n    mediumslateblue: [123, 104, 238],\r\n    mediumspringgreen: [0, 250, 154],\r\n    mediumturquoise: [72, 209, 204],\r\n    mediumvioletred: [199, 21, 133],\r\n    midnightblue: [25, 25, 112],\r\n    mintcream: [245, 255, 250],\r\n    mistyrose: [255, 228, 225],\r\n    moccasin: [255, 228, 181],\r\n    navajowhite: [255, 222, 173],\r\n    navy: [0, 0, 128],\r\n    oldlace: [253, 245, 230],\r\n    olive: [128, 128, 0],\r\n    olivedrab: [107, 142, 35],\r\n    orange: [255, 165, 0],\r\n    orangered: [255, 69, 0],\r\n    orchid: [218, 112, 214],\r\n    palegoldenrod: [238, 232, 170],\r\n    palegreen: [152, 251, 152],\r\n    paleturquoise: [175, 238, 238],\r\n    palevioletred: [219, 112, 147],\r\n    papayawhip: [255, 239, 213],\r\n    peachpuff: [255, 218, 185],\r\n    peru: [205, 133, 63],\r\n    pink: [255, 192, 203],\r\n    plum: [221, 160, 203],\r\n    powderblue: [176, 224, 230],\r\n    purple: [128, 0, 128],\r\n    rebeccapurple: [102, 51, 153],\r\n    red: [255, 0, 0],\r\n    rosybrown: [188, 143, 143],\r\n    royalblue: [65, 105, 225],\r\n    saddlebrown: [139, 69, 19],\r\n    salmon: [250, 128, 114],\r\n    sandybrown: [244, 164, 96],\r\n    seagreen: [46, 139, 87],\r\n    seashell: [255, 245, 238],\r\n    sienna: [160, 82, 45],\r\n    silver: [192, 192, 192],\r\n    skyblue: [135, 206, 235],\r\n    slateblue: [106, 90, 205],\r\n    slategray: [119, 128, 144],\r\n    slategrey: [119, 128, 144],\r\n    snow: [255, 255, 250],\r\n    springgreen: [0, 255, 127],\r\n    steelblue: [70, 130, 180],\r\n    tan: [210, 180, 140],\r\n    teal: [0, 128, 128],\r\n    thistle: [216, 191, 216],\r\n    transparent: [255, 255, 255, 0],\r\n    tomato: [255, 99, 71],\r\n    turquoise: [64, 224, 208],\r\n    violet: [238, 130, 238],\r\n    wheat: [245, 222, 179],\r\n    white: [255, 255, 255],\r\n    whitesmoke: [245, 245, 245],\r\n    yellow: [255, 255, 0],\r\n    yellowgreen: [154, 205, 5]\r\n}, RGB_REGEX = /rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)/, animQueue = [];\r\n/**\r\n * @namespace Util\r\n * @memberof Konva\r\n */\r\nexport var Util = {\r\n    /*\r\n     * cherry-picked utilities from underscore.js\r\n     */\r\n    _isElement: function (obj) {\r\n        return !!(obj && obj.nodeType == 1);\r\n    },\r\n    _isFunction: function (obj) {\r\n        return !!(obj && obj.constructor && obj.call && obj.apply);\r\n    },\r\n    _isPlainObject: function (obj) {\r\n        return !!obj && obj.constructor === Object;\r\n    },\r\n    _isArray: function (obj) {\r\n        return Object.prototype.toString.call(obj) === OBJECT_ARRAY;\r\n    },\r\n    _isNumber: function (obj) {\r\n        return (Object.prototype.toString.call(obj) === OBJECT_NUMBER &&\r\n            !isNaN(obj) &&\r\n            isFinite(obj));\r\n    },\r\n    _isString: function (obj) {\r\n        return Object.prototype.toString.call(obj) === OBJECT_STRING;\r\n    },\r\n    _isBoolean: function (obj) {\r\n        return Object.prototype.toString.call(obj) === OBJECT_BOOLEAN;\r\n    },\r\n    // arrays are objects too\r\n    isObject: function (val) {\r\n        return val instanceof Object;\r\n    },\r\n    isValidSelector: function (selector) {\r\n        if (typeof selector !== 'string') {\r\n            return false;\r\n        }\r\n        var firstChar = selector[0];\r\n        return (firstChar === '#' ||\r\n            firstChar === '.' ||\r\n            firstChar === firstChar.toUpperCase());\r\n    },\r\n    _sign: function (number) {\r\n        if (number === 0) {\r\n            return 0;\r\n        }\r\n        if (number > 0) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    },\r\n    requestAnimFrame: function (callback) {\r\n        animQueue.push(callback);\r\n        if (animQueue.length === 1) {\r\n            requestAnimationFrame(function () {\r\n                var queue = animQueue;\r\n                animQueue = [];\r\n                queue.forEach(function (cb) {\r\n                    cb();\r\n                });\r\n            });\r\n        }\r\n    },\r\n    createCanvasElement: function () {\r\n        var canvas = document.createElement('canvas');\r\n        // on some environments canvas.style is readonly\r\n        try {\r\n            canvas.style = canvas.style || {};\r\n        }\r\n        catch (e) { }\r\n        return canvas;\r\n    },\r\n    createImageElement: function () {\r\n        return document.createElement('img');\r\n    },\r\n    _isInDocument: function (el) {\r\n        while ((el = el.parentNode)) {\r\n            if (el == document) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n    _simplifyArray: function (arr) {\r\n        var retArr = [], len = arr.length, util = Util, n, val;\r\n        for (n = 0; n < len; n++) {\r\n            val = arr[n];\r\n            if (util._isNumber(val)) {\r\n                val = Math.round(val * 1000) / 1000;\r\n            }\r\n            else if (!util._isString(val)) {\r\n                val = val.toString();\r\n            }\r\n            retArr.push(val);\r\n        }\r\n        return retArr;\r\n    },\r\n    /*\r\n     * arg can be an image object or image data\r\n     */\r\n    _urlToImage: function (url, callback) {\r\n        // if arg is a string, then it's a data url\r\n        var imageObj = new glob.Image();\r\n        imageObj.onload = function () {\r\n            callback(imageObj);\r\n        };\r\n        imageObj.src = url;\r\n    },\r\n    _rgbToHex: function (r, g, b) {\r\n        return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n    },\r\n    _hexToRgb: function (hex) {\r\n        hex = hex.replace(HASH, EMPTY_STRING);\r\n        var bigint = parseInt(hex, 16);\r\n        return {\r\n            r: (bigint >> 16) & 255,\r\n            g: (bigint >> 8) & 255,\r\n            b: bigint & 255\r\n        };\r\n    },\r\n    /**\r\n     * return random hex color\r\n     * @method\r\n     * @memberof Konva.Util\r\n     * @example\r\n     * shape.fill(Konva.Util.getRandomColor());\r\n     */\r\n    getRandomColor: function () {\r\n        var randColor = ((Math.random() * 0xffffff) << 0).toString(16);\r\n        while (randColor.length < 6) {\r\n            randColor = ZERO + randColor;\r\n        }\r\n        return HASH + randColor;\r\n    },\r\n    get: function (val, def) {\r\n        if (val === undefined) {\r\n            return def;\r\n        }\r\n        else {\r\n            return val;\r\n        }\r\n    },\r\n    /**\r\n     * get RGB components of a color\r\n     * @method\r\n     * @memberof Konva.Util\r\n     * @param {String} color\r\n     * @example\r\n     * // each of the following examples return {r:0, g:0, b:255}\r\n     * var rgb = Konva.Util.getRGB('blue');\r\n     * var rgb = Konva.Util.getRGB('#0000ff');\r\n     * var rgb = Konva.Util.getRGB('rgb(0,0,255)');\r\n     */\r\n    getRGB: function (color) {\r\n        var rgb;\r\n        // color string\r\n        if (color in COLORS) {\r\n            rgb = COLORS[color];\r\n            return {\r\n                r: rgb[0],\r\n                g: rgb[1],\r\n                b: rgb[2]\r\n            };\r\n        }\r\n        else if (color[0] === HASH) {\r\n            // hex\r\n            return this._hexToRgb(color.substring(1));\r\n        }\r\n        else if (color.substr(0, 4) === RGB_PAREN) {\r\n            // rgb string\r\n            rgb = RGB_REGEX.exec(color.replace(/ /g, ''));\r\n            return {\r\n                r: parseInt(rgb[1], 10),\r\n                g: parseInt(rgb[2], 10),\r\n                b: parseInt(rgb[3], 10)\r\n            };\r\n        }\r\n        else {\r\n            // default\r\n            return {\r\n                r: 0,\r\n                g: 0,\r\n                b: 0\r\n            };\r\n        }\r\n    },\r\n    // convert any color string to RGBA object\r\n    // from https://github.com/component/color-parser\r\n    colorToRGBA: function (str) {\r\n        str = str || 'black';\r\n        return (Util._namedColorToRBA(str) ||\r\n            Util._hex3ColorToRGBA(str) ||\r\n            Util._hex6ColorToRGBA(str) ||\r\n            Util._rgbColorToRGBA(str) ||\r\n            Util._rgbaColorToRGBA(str));\r\n    },\r\n    // Parse named css color. Like \"green\"\r\n    _namedColorToRBA: function (str) {\r\n        var c = COLORS[str.toLowerCase()];\r\n        if (!c) {\r\n            return null;\r\n        }\r\n        return {\r\n            r: c[0],\r\n            g: c[1],\r\n            b: c[2],\r\n            a: 1\r\n        };\r\n    },\r\n    // Parse rgb(n, n, n)\r\n    _rgbColorToRGBA: function (str) {\r\n        if (str.indexOf('rgb(') === 0) {\r\n            str = str.match(/rgb\\(([^)]+)\\)/)[1];\r\n            var parts = str.split(/ *, */).map(Number);\r\n            return {\r\n                r: parts[0],\r\n                g: parts[1],\r\n                b: parts[2],\r\n                a: 1\r\n            };\r\n        }\r\n    },\r\n    // Parse rgba(n, n, n, n)\r\n    _rgbaColorToRGBA: function (str) {\r\n        if (str.indexOf('rgba(') === 0) {\r\n            str = str.match(/rgba\\(([^)]+)\\)/)[1];\r\n            var parts = str.split(/ *, */).map(Number);\r\n            return {\r\n                r: parts[0],\r\n                g: parts[1],\r\n                b: parts[2],\r\n                a: parts[3]\r\n            };\r\n        }\r\n    },\r\n    // Parse #nnnnnn\r\n    _hex6ColorToRGBA: function (str) {\r\n        if (str[0] === '#' && str.length === 7) {\r\n            return {\r\n                r: parseInt(str.slice(1, 3), 16),\r\n                g: parseInt(str.slice(3, 5), 16),\r\n                b: parseInt(str.slice(5, 7), 16),\r\n                a: 1\r\n            };\r\n        }\r\n    },\r\n    // Parse #nnn\r\n    _hex3ColorToRGBA: function (str) {\r\n        if (str[0] === '#' && str.length === 4) {\r\n            return {\r\n                r: parseInt(str[1] + str[1], 16),\r\n                g: parseInt(str[2] + str[2], 16),\r\n                b: parseInt(str[3] + str[3], 16),\r\n                a: 1\r\n            };\r\n        }\r\n    },\r\n    /**\r\n     * check intersection of two client rectangles\r\n     * @method\r\n     * @memberof Konva.Util\r\n     * @param {Object} r1 - { x, y, width, height } client rectangle\r\n     * @param {Object} r2 - { x, y, width, height } client rectangle\r\n     * @example\r\n     * const overlapping = Konva.Util.haveIntersection(shape1.getClientRect(), shape2.getClientRect());\r\n     */\r\n    haveIntersection: function (r1, r2) {\r\n        return !(r2.x > r1.x + r1.width ||\r\n            r2.x + r2.width < r1.x ||\r\n            r2.y > r1.y + r1.height ||\r\n            r2.y + r2.height < r1.y);\r\n    },\r\n    cloneObject: function (obj) {\r\n        var retObj = {};\r\n        for (var key in obj) {\r\n            if (this._isPlainObject(obj[key])) {\r\n                retObj[key] = this.cloneObject(obj[key]);\r\n            }\r\n            else if (this._isArray(obj[key])) {\r\n                retObj[key] = this.cloneArray(obj[key]);\r\n            }\r\n            else {\r\n                retObj[key] = obj[key];\r\n            }\r\n        }\r\n        return retObj;\r\n    },\r\n    cloneArray: function (arr) {\r\n        return arr.slice(0);\r\n    },\r\n    _degToRad: function (deg) {\r\n        return deg * PI_OVER_DEG180;\r\n    },\r\n    _radToDeg: function (rad) {\r\n        return rad * DEG180_OVER_PI;\r\n    },\r\n    _capitalize: function (str) {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    },\r\n    throw: function (str) {\r\n        throw new Error(KONVA_ERROR + str);\r\n    },\r\n    error: function (str) {\r\n        console.error(KONVA_ERROR + str);\r\n    },\r\n    warn: function (str) {\r\n        if (!Konva.showWarnings) {\r\n            return;\r\n        }\r\n        console.warn(KONVA_WARNING + str);\r\n    },\r\n    extend: function (child, parent) {\r\n        function Ctor() {\r\n            this.constructor = child;\r\n        }\r\n        Ctor.prototype = parent.prototype;\r\n        var oldProto = child.prototype;\r\n        child.prototype = new Ctor();\r\n        for (var key in oldProto) {\r\n            if (oldProto.hasOwnProperty(key)) {\r\n                child.prototype[key] = oldProto[key];\r\n            }\r\n        }\r\n        child.__super__ = parent.prototype;\r\n        // create reference to parent\r\n        child.super = parent;\r\n    },\r\n    _getControlPoints: function (x0, y0, x1, y1, x2, y2, t) {\r\n        var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)), d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), fa = (t * d01) / (d01 + d12), fb = (t * d12) / (d01 + d12), p1x = x1 - fa * (x2 - x0), p1y = y1 - fa * (y2 - y0), p2x = x1 + fb * (x2 - x0), p2y = y1 + fb * (y2 - y0);\r\n        return [p1x, p1y, p2x, p2y];\r\n    },\r\n    _expandPoints: function (p, tension) {\r\n        var len = p.length, allPoints = [], n, cp;\r\n        for (n = 2; n < len - 2; n += 2) {\r\n            cp = Util._getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);\r\n            allPoints.push(cp[0]);\r\n            allPoints.push(cp[1]);\r\n            allPoints.push(p[n]);\r\n            allPoints.push(p[n + 1]);\r\n            allPoints.push(cp[2]);\r\n            allPoints.push(cp[3]);\r\n        }\r\n        return allPoints;\r\n    },\r\n    each: function (obj, func) {\r\n        for (var key in obj) {\r\n            func(key, obj[key]);\r\n        }\r\n    },\r\n    _inRange: function (val, left, right) {\r\n        return left <= val && val < right;\r\n    },\r\n    _getProjectionToSegment: function (x1, y1, x2, y2, x3, y3) {\r\n        var x, y, dist;\r\n        var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\r\n        if (pd2 == 0) {\r\n            x = x1;\r\n            y = y1;\r\n            dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);\r\n        }\r\n        else {\r\n            var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;\r\n            if (u < 0) {\r\n                x = x1;\r\n                y = y1;\r\n                dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);\r\n            }\r\n            else if (u > 1.0) {\r\n                x = x2;\r\n                y = y2;\r\n                dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);\r\n            }\r\n            else {\r\n                x = x1 + u * (x2 - x1);\r\n                y = y1 + u * (y2 - y1);\r\n                dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);\r\n            }\r\n        }\r\n        return [x, y, dist];\r\n    },\r\n    // line as array of points.\r\n    // line might be closed\r\n    _getProjectionToLine: function (pt, line, isClosed) {\r\n        var pc = Util.cloneObject(pt);\r\n        var dist = Number.MAX_VALUE;\r\n        line.forEach(function (p1, i) {\r\n            if (!isClosed && i === line.length - 1) {\r\n                return;\r\n            }\r\n            var p2 = line[(i + 1) % line.length];\r\n            var proj = Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);\r\n            var px = proj[0], py = proj[1], pdist = proj[2];\r\n            if (pdist < dist) {\r\n                pc.x = px;\r\n                pc.y = py;\r\n                dist = pdist;\r\n            }\r\n        });\r\n        return pc;\r\n    },\r\n    _prepareArrayForTween: function (startArray, endArray, isClosed) {\r\n        var n, start = [], end = [];\r\n        if (startArray.length > endArray.length) {\r\n            var temp = endArray;\r\n            endArray = startArray;\r\n            startArray = temp;\r\n        }\r\n        for (n = 0; n < startArray.length; n += 2) {\r\n            start.push({\r\n                x: startArray[n],\r\n                y: startArray[n + 1]\r\n            });\r\n        }\r\n        for (n = 0; n < endArray.length; n += 2) {\r\n            end.push({\r\n                x: endArray[n],\r\n                y: endArray[n + 1]\r\n            });\r\n        }\r\n        var newStart = [];\r\n        end.forEach(function (point) {\r\n            var pr = Util._getProjectionToLine(point, start, isClosed);\r\n            newStart.push(pr.x);\r\n            newStart.push(pr.y);\r\n        });\r\n        return newStart;\r\n    },\r\n    _prepareToStringify: function (obj) {\r\n        var desc;\r\n        obj.visitedByCircularReferenceRemoval = true;\r\n        for (var key in obj) {\r\n            if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == 'object')) {\r\n                continue;\r\n            }\r\n            desc = Object.getOwnPropertyDescriptor(obj, key);\r\n            if (obj[key].visitedByCircularReferenceRemoval ||\r\n                Util._isElement(obj[key])) {\r\n                if (desc.configurable) {\r\n                    delete obj[key];\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            else if (Util._prepareToStringify(obj[key]) === null) {\r\n                if (desc.configurable) {\r\n                    delete obj[key];\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        delete obj.visitedByCircularReferenceRemoval;\r\n        return obj;\r\n    },\r\n    // very simplified version of Object.assign\r\n    _assign: function (target, source) {\r\n        for (var key in source) {\r\n            target[key] = source[key];\r\n        }\r\n        return target;\r\n    }\r\n};\r\n"}
