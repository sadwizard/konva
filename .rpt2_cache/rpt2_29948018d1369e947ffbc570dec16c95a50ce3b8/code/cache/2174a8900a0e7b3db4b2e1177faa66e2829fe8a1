{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\nvar PIx2 = Math.PI * 2;\r\n/**\r\n * Ring constructor\r\n * @constructor\r\n * @augments Konva.Shape\r\n * @memberof Konva\r\n * @param {Object} config\r\n * @param {Number} config.innerRadius\r\n * @param {Number} config.outerRadius\r\n * @param {Boolean} [config.clockwise]\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * var ring = new Konva.Ring({\r\n *   innerRadius: 40,\r\n *   outerRadius: 80,\r\n *   fill: 'red',\r\n *   stroke: 'black',\r\n *   strokeWidth: 5\r\n * });\r\n */\r\nvar Ring = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Ring, _super);\r\n    function Ring() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Ring.prototype._sceneFunc = function (context) {\r\n        context.beginPath();\r\n        context.arc(0, 0, this.innerRadius(), 0, PIx2, false);\r\n        context.moveTo(this.outerRadius(), 0);\r\n        context.arc(0, 0, this.outerRadius(), PIx2, 0, true);\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Ring.prototype.getWidth = function () {\r\n        return this.outerRadius() * 2;\r\n    };\r\n    Ring.prototype.getHeight = function () {\r\n        return this.outerRadius() * 2;\r\n    };\r\n    Ring.prototype.setWidth = function (width) {\r\n        this.outerRadius(width / 2);\r\n    };\r\n    Ring.prototype.setHeight = function (height) {\r\n        this.outerRadius(height / 2);\r\n    };\r\n    return Ring;\r\n}(Shape));\r\nexport { Ring };\r\nRing.prototype.className = 'Ring';\r\nRing.prototype._centroid = true;\r\nRing.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];\r\n_registerNode(Ring);\r\n/**\r\n * get/set innerRadius\r\n * @method\r\n * @name Konva.Ring#innerRadius\r\n * @param {Number} innerRadius\r\n * @returns {Number}\r\n * @example\r\n * // get inner radius\r\n * var innerRadius = ring.innerRadius();\r\n *\r\n * // set inner radius\r\n * ring.innerRadius(20);\r\n */\r\nFactory.addGetterSetter(Ring, 'innerRadius', 0, getNumberValidator());\r\n/**\r\n * get/set outerRadius\r\n * @name Konva.Ring#outerRadius\r\n * @method\r\n * @param {Number} outerRadius\r\n * @returns {Number}\r\n * @example\r\n * // get outer radius\r\n * var outerRadius = ring.outerRadius();\r\n *\r\n * // set outer radius\r\n * ring.outerRadius(20);\r\n */\r\nFactory.addGetterSetter(Ring, 'outerRadius', 0, getNumberValidator());\r\nCollection.mapMethods(Ring);\r\n"}
