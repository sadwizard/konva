{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * Ellipse constructor\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {Object} config.radius defines x and y radius\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * var ellipse = new Konva.Ellipse({\r\n *   radius : {\r\n *     x : 50,\r\n *     y : 50\r\n *   },\r\n *   fill: 'red'\r\n * });\r\n */\r\nvar Ellipse = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Ellipse, _super);\r\n    function Ellipse() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Ellipse.prototype._sceneFunc = function (context) {\r\n        var rx = this.radiusX(), ry = this.radiusY();\r\n        context.beginPath();\r\n        context.save();\r\n        if (rx !== ry) {\r\n            context.scale(1, ry / rx);\r\n        }\r\n        context.arc(0, 0, rx, 0, Math.PI * 2, false);\r\n        context.restore();\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Ellipse.prototype.getWidth = function () {\r\n        return this.radiusX() * 2;\r\n    };\r\n    Ellipse.prototype.getHeight = function () {\r\n        return this.radiusY() * 2;\r\n    };\r\n    Ellipse.prototype.setWidth = function (width) {\r\n        this.radiusX(width / 2);\r\n    };\r\n    Ellipse.prototype.setHeight = function (height) {\r\n        this.radiusY(height / 2);\r\n    };\r\n    return Ellipse;\r\n}(Shape));\r\nexport { Ellipse };\r\nEllipse.prototype.className = 'Ellipse';\r\nEllipse.prototype._centroid = true;\r\nEllipse.prototype._attrsAffectingSize = ['radiusX', 'radiusY'];\r\n_registerNode(Ellipse);\r\n// add getters setters\r\nFactory.addComponentsGetterSetter(Ellipse, 'radius', ['x', 'y']);\r\n/**\r\n * get/set radius\r\n * @name Konva.Ellipse#radius\r\n * @method\r\n * @param {Object} radius\r\n * @param {Number} radius.x\r\n * @param {Number} radius.y\r\n * @returns {Object}\r\n * @example\r\n * // get radius\r\n * var radius = ellipse.radius();\r\n *\r\n * // set radius\r\n * ellipse.radius({\r\n *   x: 200,\r\n *   y: 100\r\n * });\r\n */\r\nFactory.addGetterSetter(Ellipse, 'radiusX', 0, getNumberValidator());\r\n/**\r\n * get/set radius x\r\n * @name Konva.Ellipse#radiusX\r\n * @method\r\n * @param {Number} x\r\n * @returns {Number}\r\n * @example\r\n * // get radius x\r\n * var radiusX = ellipse.radiusX();\r\n *\r\n * // set radius x\r\n * ellipse.radiusX(200);\r\n */\r\nFactory.addGetterSetter(Ellipse, 'radiusY', 0, getNumberValidator());\r\n/**\r\n * get/set radius y\r\n * @name Konva.Ellipse#radiusY\r\n * @method\r\n * @param {Number} y\r\n * @returns {Number}\r\n * @example\r\n * // get radius y\r\n * var radiusY = ellipse.radiusY();\r\n *\r\n * // set radius y\r\n * ellipse.radiusY(200);\r\n */\r\nCollection.mapMethods(Ellipse);\r\n"}
