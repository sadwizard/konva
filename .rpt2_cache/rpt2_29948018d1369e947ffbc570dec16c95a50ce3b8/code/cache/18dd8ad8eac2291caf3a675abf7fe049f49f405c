{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { Konva } from '../Global';\r\nimport { getNumberValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * Wedge constructor\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {Number} config.angle in degrees\r\n * @param {Number} config.radius\r\n * @param {Boolean} [config.clockwise]\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * // draw a wedge that's pointing downwards\r\n * var wedge = new Konva.Wedge({\r\n *   radius: 40,\r\n *   fill: 'red',\r\n *   stroke: 'black'\r\n *   strokeWidth: 5,\r\n *   angleDeg: 60,\r\n *   rotationDeg: -120\r\n * });\r\n */\r\nvar Wedge = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Wedge, _super);\r\n    function Wedge() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Wedge.prototype._sceneFunc = function (context) {\r\n        context.beginPath();\r\n        context.arc(0, 0, this.radius(), 0, Konva.getAngle(this.angle()), this.clockwise());\r\n        context.lineTo(0, 0);\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Wedge.prototype.getWidth = function () {\r\n        return this.radius() * 2;\r\n    };\r\n    Wedge.prototype.getHeight = function () {\r\n        return this.radius() * 2;\r\n    };\r\n    Wedge.prototype.setWidth = function (width) {\r\n        this.radius(width / 2);\r\n    };\r\n    Wedge.prototype.setHeight = function (height) {\r\n        this.radius(height / 2);\r\n    };\r\n    return Wedge;\r\n}(Shape));\r\nexport { Wedge };\r\nWedge.prototype.className = 'Wedge';\r\nWedge.prototype._centroid = true;\r\nWedge.prototype._attrsAffectingSize = ['radius'];\r\n_registerNode(Wedge);\r\n/**\r\n * get/set radius\r\n * @name Konva.Wedge#radius\r\n * @method\r\n * @param {Number} radius\r\n * @returns {Number}\r\n * @example\r\n * // get radius\r\n * var radius = wedge.radius();\r\n *\r\n * // set radius\r\n * wedge.radius(10);\r\n */\r\nFactory.addGetterSetter(Wedge, 'radius', 0, getNumberValidator());\r\n/**\r\n * get/set angle in degrees\r\n * @name Konva.Wedge#angle\r\n * @method\r\n * @param {Number} angle\r\n * @returns {Number}\r\n * @example\r\n * // get angle\r\n * var angle = wedge.angle();\r\n *\r\n * // set angle\r\n * wedge.angle(20);\r\n */\r\nFactory.addGetterSetter(Wedge, 'angle', 0, getNumberValidator());\r\n/**\r\n * get/set clockwise flag\r\n * @name Konva.Wedge#clockwise\r\n * @method\r\n * @param {Number} clockwise\r\n * @returns {Number}\r\n * @example\r\n * // get clockwise flag\r\n * var clockwise = wedge.clockwise();\r\n *\r\n * // draw wedge counter-clockwise\r\n * wedge.clockwise(false);\r\n *\r\n * // draw wedge clockwise\r\n * wedge.clockwise(true);\r\n */\r\nFactory.addGetterSetter(Wedge, 'clockwise', false);\r\nFactory.backCompat(Wedge, {\r\n    angleDeg: 'angle',\r\n    getAngleDeg: 'getAngle',\r\n    setAngleDeg: 'setAngle'\r\n});\r\nCollection.mapMethods(Wedge);\r\n"}
