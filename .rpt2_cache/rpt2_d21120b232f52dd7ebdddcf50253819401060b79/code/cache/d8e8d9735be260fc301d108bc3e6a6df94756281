{"code":"import { Factory } from '../Factory';\r\nimport { Node } from '../Node';\r\nimport { getNumberValidator } from '../Validators';\r\nfunction remap(fromValue, fromMin, fromMax, toMin, toMax) {\r\n    // Compute the range of the data\r\n    var fromRange = fromMax - fromMin, toRange = toMax - toMin, toValue;\r\n    // If either range is 0, then the value can only be mapped to 1 value\r\n    if (fromRange === 0) {\r\n        return toMin + toRange / 2;\r\n    }\r\n    if (toRange === 0) {\r\n        return toMin;\r\n    }\r\n    // (1) untranslate, (2) unscale, (3) rescale, (4) retranslate\r\n    toValue = (fromValue - fromMin) / fromRange;\r\n    toValue = toRange * toValue + toMin;\r\n    return toValue;\r\n}\r\n/**\r\n * Enhance Filter. Adjusts the colors so that they span the widest\r\n *  possible range (ie 0-255). Performs w*h pixel reads and w*h pixel\r\n *  writes.\r\n * @function\r\n * @name Enhance\r\n * @memberof Konva.Filters\r\n * @param {Object} imageData\r\n * @author ippo615\r\n * @example\r\n * node.cache();\r\n * node.filters([Konva.Filters.Enhance]);\r\n * node.enhance(0.4);\r\n */\r\nexport var Enhance = function (imageData) {\r\n    var data = imageData.data, nSubPixels = data.length, rMin = data[0], rMax = rMin, r, gMin = data[1], gMax = gMin, g, bMin = data[2], bMax = bMin, b, i;\r\n    // If we are not enhancing anything - don't do any computation\r\n    var enhanceAmount = this.enhance();\r\n    if (enhanceAmount === 0) {\r\n        return;\r\n    }\r\n    // 1st Pass - find the min and max for each channel:\r\n    for (i = 0; i < nSubPixels; i += 4) {\r\n        r = data[i + 0];\r\n        if (r < rMin) {\r\n            rMin = r;\r\n        }\r\n        else if (r > rMax) {\r\n            rMax = r;\r\n        }\r\n        g = data[i + 1];\r\n        if (g < gMin) {\r\n            gMin = g;\r\n        }\r\n        else if (g > gMax) {\r\n            gMax = g;\r\n        }\r\n        b = data[i + 2];\r\n        if (b < bMin) {\r\n            bMin = b;\r\n        }\r\n        else if (b > bMax) {\r\n            bMax = b;\r\n        }\r\n        //a = data[i + 3];\r\n        //if (a < aMin) { aMin = a; } else\r\n        //if (a > aMax) { aMax = a; }\r\n    }\r\n    // If there is only 1 level - don't remap\r\n    if (rMax === rMin) {\r\n        rMax = 255;\r\n        rMin = 0;\r\n    }\r\n    if (gMax === gMin) {\r\n        gMax = 255;\r\n        gMin = 0;\r\n    }\r\n    if (bMax === bMin) {\r\n        bMax = 255;\r\n        bMin = 0;\r\n    }\r\n    var rMid, rGoalMax, rGoalMin, gMid, gGoalMax, gGoalMin, bMid, bGoalMax, bGoalMin;\r\n    // If the enhancement is positive - stretch the histogram\r\n    if (enhanceAmount > 0) {\r\n        rGoalMax = rMax + enhanceAmount * (255 - rMax);\r\n        rGoalMin = rMin - enhanceAmount * (rMin - 0);\r\n        gGoalMax = gMax + enhanceAmount * (255 - gMax);\r\n        gGoalMin = gMin - enhanceAmount * (gMin - 0);\r\n        bGoalMax = bMax + enhanceAmount * (255 - bMax);\r\n        bGoalMin = bMin - enhanceAmount * (bMin - 0);\r\n        // If the enhancement is negative -   compress the histogram\r\n    }\r\n    else {\r\n        rMid = (rMax + rMin) * 0.5;\r\n        rGoalMax = rMax + enhanceAmount * (rMax - rMid);\r\n        rGoalMin = rMin + enhanceAmount * (rMin - rMid);\r\n        gMid = (gMax + gMin) * 0.5;\r\n        gGoalMax = gMax + enhanceAmount * (gMax - gMid);\r\n        gGoalMin = gMin + enhanceAmount * (gMin - gMid);\r\n        bMid = (bMax + bMin) * 0.5;\r\n        bGoalMax = bMax + enhanceAmount * (bMax - bMid);\r\n        bGoalMin = bMin + enhanceAmount * (bMin - bMid);\r\n    }\r\n    // Pass 2 - remap everything, except the alpha\r\n    for (i = 0; i < nSubPixels; i += 4) {\r\n        data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);\r\n        data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);\r\n        data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);\r\n        //data[i + 3] = remap(data[i + 3], aMin, aMax, aGoalMin, aGoalMax);\r\n    }\r\n};\r\n/**\r\n * get/set enhance. Use with {@link Konva.Filters.Enhance} filter. -1 to 1 values\r\n * @name Konva.Node#enhance\r\n * @method\r\n * @param {Float} amount\r\n * @returns {Float}\r\n */\r\nFactory.addGetterSetter(Node, 'enhance', 0, getNumberValidator(), Factory.afterSetFilter);\r\n"}
