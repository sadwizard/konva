{"code":"/*eslint-disable max-depth */\r\nimport { Factory } from '../Factory';\r\nimport { Util } from '../Util';\r\nimport { Node } from '../Node';\r\nimport { getNumberValidator } from '../Validators';\r\n/**\r\n * Pixelate Filter. Averages groups of pixels and redraws\r\n *  them as larger pixels\r\n * @function\r\n * @name Pixelate\r\n * @memberof Konva.Filters\r\n * @param {Object} imageData\r\n * @author ippo615\r\n * @example\r\n * node.cache();\r\n * node.filters([Konva.Filters.Pixelate]);\r\n * node.pixelSize(10);\r\n */\r\nexport var Pixelate = function (imageData) {\r\n    var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, \r\n    //pixelsPerBin = pixelSize * pixelSize,\r\n    red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;\r\n    if (pixelSize <= 0) {\r\n        Util.error('pixelSize value can not be <= 0');\r\n        return;\r\n    }\r\n    for (xBin = 0; xBin < nBinsX; xBin += 1) {\r\n        for (yBin = 0; yBin < nBinsY; yBin += 1) {\r\n            // Initialize the color accumlators to 0\r\n            red = 0;\r\n            green = 0;\r\n            blue = 0;\r\n            alpha = 0;\r\n            // Determine which pixels are included in this bin\r\n            xBinStart = xBin * pixelSize;\r\n            xBinEnd = xBinStart + pixelSize;\r\n            yBinStart = yBin * pixelSize;\r\n            yBinEnd = yBinStart + pixelSize;\r\n            // Add all of the pixels to this bin!\r\n            pixelsInBin = 0;\r\n            for (x = xBinStart; x < xBinEnd; x += 1) {\r\n                if (x >= width) {\r\n                    continue;\r\n                }\r\n                for (y = yBinStart; y < yBinEnd; y += 1) {\r\n                    if (y >= height) {\r\n                        continue;\r\n                    }\r\n                    i = (width * y + x) * 4;\r\n                    red += data[i + 0];\r\n                    green += data[i + 1];\r\n                    blue += data[i + 2];\r\n                    alpha += data[i + 3];\r\n                    pixelsInBin += 1;\r\n                }\r\n            }\r\n            // Make sure the channels are between 0-255\r\n            red = red / pixelsInBin;\r\n            green = green / pixelsInBin;\r\n            blue = blue / pixelsInBin;\r\n            alpha = alpha / pixelsInBin;\r\n            // Draw this bin\r\n            for (x = xBinStart; x < xBinEnd; x += 1) {\r\n                if (x >= width) {\r\n                    continue;\r\n                }\r\n                for (y = yBinStart; y < yBinEnd; y += 1) {\r\n                    if (y >= height) {\r\n                        continue;\r\n                    }\r\n                    i = (width * y + x) * 4;\r\n                    data[i + 0] = red;\r\n                    data[i + 1] = green;\r\n                    data[i + 2] = blue;\r\n                    data[i + 3] = alpha;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);\r\n/**\r\n * get/set pixel size. Use with {@link Konva.Filters.Pixelate} filter.\r\n * @name Konva.Node#pixelSize\r\n * @method\r\n * @param {Integer} pixelSize\r\n * @returns {Integer}\r\n */\r\n"}
