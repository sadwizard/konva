{"code":"import * as tslib_1 from \"tslib\";\r\nimport { Collection } from '../Util';\r\nimport { Factory } from '../Factory';\r\nimport { Shape } from '../Shape';\r\nimport { Konva } from '../Global';\r\nimport { getNumberValidator, getBooleanValidator } from '../Validators';\r\nimport { _registerNode } from '../Global';\r\n/**\r\n * Arc constructor\r\n * @constructor\r\n * @memberof Konva\r\n * @augments Konva.Shape\r\n * @param {Object} config\r\n * @param {Number} config.angle in degrees\r\n * @param {Number} config.innerRadius\r\n * @param {Number} config.outerRadius\r\n * @param {Boolean} [config.clockwise]\r\n * @@shapeParams\r\n * @@nodeParams\r\n * @example\r\n * // draw a Arc that's pointing downwards\r\n * var arc = new Konva.Arc({\r\n *   innerRadius: 40,\r\n *   outerRadius: 80,\r\n *   fill: 'red',\r\n *   stroke: 'black'\r\n *   strokeWidth: 5,\r\n *   angle: 60,\r\n *   rotationDeg: -120\r\n * });\r\n */\r\nvar Arc = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Arc, _super);\r\n    function Arc() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Arc.prototype._sceneFunc = function (context) {\r\n        var angle = Konva.getAngle(this.angle()), clockwise = this.clockwise();\r\n        context.beginPath();\r\n        context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);\r\n        context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);\r\n        context.closePath();\r\n        context.fillStrokeShape(this);\r\n    };\r\n    Arc.prototype.getWidth = function () {\r\n        return this.outerRadius() * 2;\r\n    };\r\n    Arc.prototype.getHeight = function () {\r\n        return this.outerRadius() * 2;\r\n    };\r\n    Arc.prototype.setWidth = function (width) {\r\n        this.outerRadius(width / 2);\r\n    };\r\n    Arc.prototype.setHeight = function (height) {\r\n        this.outerRadius(height / 2);\r\n    };\r\n    return Arc;\r\n}(Shape));\r\nexport { Arc };\r\nArc.prototype._centroid = true;\r\nArc.prototype.className = 'Arc';\r\nArc.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];\r\n_registerNode(Arc);\r\n// add getters setters\r\nFactory.addGetterSetter(Arc, 'innerRadius', 0, getNumberValidator());\r\n/**\r\n * get/set innerRadius\r\n * @name Konva.Arc#innerRadius\r\n * @method\r\n * @param {Number} innerRadius\r\n * @returns {Number}\r\n * @example\r\n * // get inner radius\r\n * var innerRadius = arc.innerRadius();\r\n *\r\n * // set inner radius\r\n * arc.innerRadius(20);\r\n */\r\nFactory.addGetterSetter(Arc, 'outerRadius', 0, getNumberValidator());\r\n/**\r\n * get/set outerRadius\r\n * @name Konva.Arc#outerRadius\r\n * @method\r\n * @param {Number} outerRadius\r\n * @returns {Number}\r\n * @example\r\n * // get outer radius\r\n * var outerRadius = arc.outerRadius();\r\n *\r\n * // set outer radius\r\n * arc.outerRadius(20);\r\n */\r\nFactory.addGetterSetter(Arc, 'angle', 0, getNumberValidator());\r\n/**\r\n * get/set angle in degrees\r\n * @name Konva.Arc#angle\r\n * @method\r\n * @param {Number} angle\r\n * @returns {Number}\r\n * @example\r\n * // get angle\r\n * var angle = arc.angle();\r\n *\r\n * // set angle\r\n * arc.angle(20);\r\n */\r\nFactory.addGetterSetter(Arc, 'clockwise', false, getBooleanValidator());\r\n/**\r\n * get/set clockwise flag\r\n * @name Konva.Arc#clockwise\r\n * @method\r\n * @param {Boolean} clockwise\r\n * @returns {Boolean}\r\n * @example\r\n * // get clockwise flag\r\n * var clockwise = arc.clockwise();\r\n *\r\n * // draw arc counter-clockwise\r\n * arc.clockwise(false);\r\n *\r\n * // draw arc clockwise\r\n * arc.clockwise(true);\r\n */\r\nCollection.mapMethods(Arc);\r\n"}
